const t=JSON.parse('{"key":"v-d46a9cc0","path":"/Tech/Front-end/Others/%E5%B9%B6%E5%8F%91%E5%B9%B6%E8%A1%8C%E5%BC%82%E6%AD%A5%E5%90%8C%E6%AD%A5.html","title":"","lang":"en-US","frontmatter":{"description":"并发 单纯指计算机同时处理多项任务 并行 在不同的核心上同时处理任务 同步和异步是两种不同的编程模型 同步 前一个任务执行完成之后才能够进行下一个任务，在同步中没有并发或者并行的概念 异步 两个任务可以同时进行 多线程编程 单线程异步编程（javascript）：js没有多线程的概念，但是我们可以通过函数回调的机制实现，比如fetch函数读取网络资源的时候，程序不会等待，而是会继续运行下去，当获取到网络资源之后，回调函数才会被执行","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/Others/%E5%B9%B6%E5%8F%91%E5%B9%B6%E8%A1%8C%E5%BC%82%E6%AD%A5%E5%90%8C%E6%AD%A5.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"并发 单纯指计算机同时处理多项任务 并行 在不同的核心上同时处理任务 同步和异步是两种不同的编程模型 同步 前一个任务执行完成之后才能够进行下一个任务，在同步中没有并发或者并行的概念 异步 两个任务可以同时进行 多线程编程 单线程异步编程（javascript）：js没有多线程的概念，但是我们可以通过函数回调的机制实现，比如fetch函数读取网络资源的时候，程序不会等待，而是会继续运行下去，当获取到网络资源之后，回调函数才会被执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"Tech/Front-end/Others/并发并行异步同步.md","excerpt":"<ul>\\n<li>\\n<p>并发\\n单纯指计算机同时处理多项任务</p>\\n</li>\\n<li>\\n<p>并行\\n在不同的核心上同时处理任务</p>\\n</li>\\n</ul>\\n<hr>\\n<p>同步和异步是两种不同的编程模型</p>\\n<ul>\\n<li>同步\\n前一个任务执行完成之后才能够进行下一个任务，在同步中没有并发或者并行的概念</li>\\n<li>异步\\n两个任务可以同时进行</li>\\n</ul>\\n<ol>\\n<li>多线程编程</li>\\n<li>单线程异步编程（javascript）：js没有多线程的概念，但是我们可以通过函数回调的机制实现，比如fetch函数读取网络资源的时候，程序不会等待，而是会继续运行下去，当获取到网络资源之后，回调函数才会被执行</li>\\n</ol>","autoDesc":true}');export{t as data};
