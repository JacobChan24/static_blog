import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,f as e}from"./app-9e438faa.js";const l={},u=e(`<p>路由这个概念最先是后端出现的。在以前用模板引擎开发页面时，经常会看到这样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://hometown.xxx.edu.cn/bbs/forum.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有时还会有带<code>.asp</code>或<code>.html</code>的路径，这就是所谓的SSR(Server Side Render)，通过服务端渲染，直接返回页面。</p><p>其响应过程是这样的</p><p>1.浏览器发出请求</p><p>2.服务器监听到80端口（或443）有请求过来，并解析url路径</p><p>3.根据服务器的路由配置，返回相应信息（可以是 html 字串，也可以是 json 数据，图片等）</p><p>4.浏览器根据数据包的<code>Content-Type</code>来决定如何解析数据</p><p>简单来说路由就是用来跟后端服务器进行交互的一种方式，通过不同的路径，来请求不同的资源，请求不同的页面是路由的其中一种功能。</p><h2 id="前端路由的诞生的缘由" tabindex="-1"><a class="header-anchor" href="#前端路由的诞生的缘由" aria-hidden="true">#</a> 前端路由的诞生的缘由</h2><p>前端路由的出现要从 ajax 开始，为什么？且听下面分析 (ˉ▽￣～)</p><p>Ajax，全称 Asynchronous JavaScript And XML，是浏览器用来实现异步加载的一种技术方案。在 90s 年代初，大多数的网页都是通过直接返回 HTML 的，用户的每次更新操作都需要重新刷新页面。及其影响交互体验，随着网络的发展，迫切需要一种方案来改善这种情况。</p><p>1996，微软首先提出 iframe 标签，iframe 带来了异步加载和请求元素的概念，随后在 1998 年，微软的 Outloook Web App 团队提出 Ajax 的基本概念（XMLHttpRequest的前身），并在 IE5 通过 ActiveX 来实现了这项技术。在微软实现这个概念后，其他浏览器比如 Mozilia，Safari，Opera 相继以 XMLHttpRequest 来实现 Ajax。（ 兼容问题从此出现，话说微软命名真喜欢用X，MFC源码一大堆。。）不过在 IE7 发布时，微软选择了妥协，兼容了 XMLHttpRequest 的实现。</p><p>有了 Ajax 后，用户交互就不用每次都刷新页面，体验带来了极大的提升。</p><p>但真正让这项技术发扬光大的，(｡･∀･)ﾉﾞ还是后来的 Google Map，它的出现向人们展现了 Ajax 的真正魅力，释放了众多开发人员的想象力，让其不仅仅局限于简单的数据和页面交互，为后来异步交互体验方式的繁荣发展带来了根基。</p><p>而异步交互体验的更高级版本就是 SPA（那么问个问题，异步交互最高级的体验是什么？会在文末揭晓）—— 单页应用。单页应用不仅仅是在页面交互是无刷新的，连页面跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。</p><p>单页应用的概念是伴随着 MVVM 出现的。最早由微软提出，然后他们在浏览器端用 <code>Knockoutjs</code> 实现。但这项技术的强大之处并未当时的开发者体会到，可能是因为 <code>Knockoutjs</code> 实现过于复杂，导致没有大面积的扩散。</p><p>同样，这次接力的选手依然是 Google。Google 通过 Angularjs 将 MVVM 及单页应用发扬光大，让前端开发者能够开发出更加大型的应用，职能变得更大了。（不得不感慨，微软 跟 Google 都是伟大的公司）。随后都是大家都知道的故事，前端圈开始得到了爆发式的发展，陆续出现了很多优秀的框架。</p><p>本来还想写更多的。。。不过有点慢慢偏离主题了（下次会专门写写）</p><h2 id="从-vue-router-来看前端路由实现原理" tabindex="-1"><a class="header-anchor" href="#从-vue-router-来看前端路由实现原理" aria-hidden="true">#</a> 从 vue-router 来看前端路由实现原理</h2><p>前端路由的实现其实很简单。</p><p>本质上就是检测 url 的变化，截获 url 地址，然后解析来匹配路由规则。</p><p>但是这样有人就会问：url 每次变化都会刷新页面啊？页面都刷新了，JavaScript 怎么检测和截获 url？</p><p>在 2014 年之前，大家是通过 hash 来实现路由，url hash 就是类似于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://segmentfault.com/a/1190000011956628#articleHeader2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种 <code>#</code>。后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发 <code>hashchange</code> 这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。</p><p>让我们来整理思路，假如我们要用 hash 的模式实现一个路由，那么流程应该是这样的。</p><figure><img src="https://pica.zhimg.com/80/v2-73fd628a36c848bce7771c395b9ce6a2_720w.jpg?source=1940ef5c" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>hash mode</p><p>hash 的实现相对来说要简单方便些，而且不用服务器来支持。</p><p>另外我们可以参考参考 vue-router 这一部分的实现（为了便于解释我简化了部分代码）</p>`,31),r={href:"https://link.zhihu.com/?target=https%3A//github.com/vuejs/vue-router/blob/dev/src/history/hash.js%23L22-L54",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
* 添加 url hash 变化的监听器
*/</span>
<span class="token function">setupListeners</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router

<span class="token doc-comment comment">/**
 * 每当 hash 变化时就解析路径
 * 匹配路由
 */</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current
  <span class="token doc-comment comment">/**
   * transitionTo: 
   * 匹配路由
   * 并通过路由配置，把新的页面 render 到 ui-view 的节点
   */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span><span class="token function">getHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">replaceHash</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检测到 hash 的变化后，就可以通过替换 DOM 的方式来实现页面的更换。</p>`,2),k=n("code",null,"pushState",-1),v=n("code",null,"replaceState",-1),m=n("code",null,"[onpopstate](https://www.zhihu.com/search?q=onpopstate&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A258574972%7D)",-1),h=n("code",null,"#",-1),b=n("code",null,"#",-1),f={href:"https://www.zhihu.com/search?q=%E9%87%8D%E5%AE%9A%E5%90%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A258574972%7D",target:"_blank",rel:"noopener noreferrer"},g={href:"https://link.zhihu.com/?target=https%3A//router.vuejs.org/zh-cn/essentials/history-mode.html",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"同样，我们来理清下思路，这样写起代码才更得心应手~",-1),y=n("figure",null,[n("img",{src:"https://pic3.zhimg.com/80/v2-ba9732885bb188f8cde94c24ce5b6757_720w.jpg?source=1940ef5c",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),w={href:"https://link.zhihu.com/?target=https%3A//github.com/vuejs/vue-router/blob/dev/src/history/html5.js",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HTML5History</span> <span class="token keyword">extends</span> <span class="token class-name">History</span> <span class="token punctuation">{</span>
<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">router<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> base<span class="token punctuation">)</span>
  <span class="token doc-comment comment">/**
   * 原理还是跟 hash 实现一样
   * 通过监听 popstate 事件
   * 匹配路由，然后更新页面 DOM
   */</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current

    <span class="token comment">// Avoiding first \`popstate\` event dispatched in some browsers but first</span>
    <span class="token comment">// history route not updated since async guard at the same time.</span>
    <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">===</span> <span class="token constant">START</span> <span class="token operator">&amp;&amp;</span> location <span class="token operator">===</span> initLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>supportsScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handleScroll</span><span class="token punctuation">(</span>router<span class="token punctuation">,</span> route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">go</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">push</span> <span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> onComplete<span class="token punctuation">,</span> onAbort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">current</span><span class="token operator">:</span> fromRoute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 pushState 更新 url，不会导致浏览器发送请求，从而不会刷新页面</span>
    <span class="token function">pushState</span><span class="token punctuation">(</span><span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">+</span> route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span>
    onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> onAbort<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">replace</span> <span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> onComplete<span class="token punctuation">,</span> onAbort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">current</span><span class="token operator">:</span> fromRoute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// replaceState 跟 pushState 的区别在于，不会记录到历史栈</span>
    <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>base <span class="token operator">+</span> route<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">)</span>
    onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> onAbort<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="造个轮子" tabindex="-1"><a class="header-anchor" href="#造个轮子" aria-hidden="true">#</a> 造个轮子~</h2><p>我用纯 ES6 写了个前端的路由，没有用任何框架，就可以实现前端路由的所有功能~</p><p>当然，实现的思路就是上面的那两幅流程图。</p>`,4),A={href:"https://link.zhihu.com/?target=https%3A//sme-fe.github.io/sme-router/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://link.zhihu.com/?target=https%3A//github.com/SME-FE/sme-router",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>你还可以通过 npm 来安装这个包(功能已经实现完整，并有详细文档)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i --save sme-router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>觉得有帮助的，请点个 star ~~</p><h2 id="后记" tabindex="-1"><a class="header-anchor" href="#后记" aria-hidden="true">#</a> 后记</h2><p>异步交互的最高级体验是什么？</p><p>PWA，让前端页面可以做到离线操作（是不是越来越像原生 app 了？）</p>`,6);function M(L,E){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("vue-router hash 实现源码地址"),t(a)])]),d,n("p",null,[s("14年后，因为HTML5标准发布。多了两个 API，"),k,s(" 和 "),v,s("，通过这两个 API 可以改变 url 地址且不会发送请求。同时还有 "),m,s(" 事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。用了 HTML5 的实现，单页路由的 url 就不会多出一个"),h,s("，变得更加美观。但因为没有 "),b,s(" 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都"),n("a",f,[s("重定向"),t(a)]),s("到根页面。具体可以见：[HTML5 histroy 模式]("),n("a",g,[s("HTML5 History 模式"),t(a)]),s(")")]),_,y,n("p",null,[s("看下"),n("a",w,[s("vue-router源码"),t(a)]),s("，可以发现实现的思路大体也是相同的")]),x,n("p",null,[n("a",A,[s("在线演示地址"),t(a)])]),n("p",null,[n("a",j,[s("项目源码"),t(a)])]),S])}const z=p(l,[["render",M],["__file","前端路由.html.vue"]]);export{z as default};
