import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-9e438faa.js";const t={},p=e(`<blockquote><p>Express是一个自身的功能极简，完全是由路由和中间件构成的web开发框架</p></blockquote><p><code>res.sendStatus(500)</code><code>res.status(500).send(&quot;hi&quot;)</code><code>res.status(500).json({message: &quot;error&quot;})</code><code>res.json()</code>直接返回json，不设置状态码，默认成功</p><p>发送文件给用户下载： <code>res.download(&quot;server.js&quot;)</code></p><p>发送html文件给用户： <code>res.render</code> 我们服务器应该创建一个文件夹views储存所有的html网页</p><h2 id="_1-中间件" tabindex="-1"><a class="header-anchor" href="#_1-中间件" aria-hidden="true">#</a> 1.中间件</h2><p>中间件可以分为如下几类：</p><ul><li>应用级别中间件</li><li>路由级别中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul><h3 id="应用级别中间件" tabindex="-1"><a class="header-anchor" href="#应用级别中间件" aria-hidden="true">#</a> 应用级别中间件</h3><p>即将中间件绑定到app对象上面的中间件，使用<code>app.use()</code>或者<code>app.METHOD()</code>方法绑定的中间件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token comment">// 所有请求都绑定此中间件</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token comment">// 所有get请求绑定的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span> <span class="token comment">// 所有home路径的请求都绑定此中间件</span>
app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span> <span class="token comment">//所有home路径的post请求绑定中间件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由级别中间件" tabindex="-1"><a class="header-anchor" href="#路由级别中间件" aria-hidden="true">#</a> 路由级别中间件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//index.js</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> homeRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;/route/homeRouter&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 新建route文件夹，储存所有路由逻辑</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">,</span>homeRouter<span class="token punctuation">)</span> <span class="token comment">// 将导入的home路由模块挂载到对应的路径上，需要将路由挂载到应用上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>homeRouter具体的写法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//创建一个路由对象</span>
<span class="token comment">//下面就将中间件都挂在路由对象上</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">//响应&#39;/home&#39;路径的get请求</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;这是返回&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/news&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//相应&#39;/home/news&#39;的get请求</span>
	res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;这是返回&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误中间件" tabindex="-1"><a class="header-anchor" href="#错误中间件" aria-hidden="true">#</a> 错误中间件</h3><p>错误中间件一定要放在最后，前面所有的路由路径没有匹配上之后就走这里的逻辑，放在前面的话，所有请求就都404了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;not found&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置中间件" tabindex="-1"><a class="header-anchor" href="#内置中间件" aria-hidden="true">#</a> 内置中间件</h3><p>express.static是Express唯一内置中间件，可以用于托管静态资源</p><h3 id="第三方中间件" tabindex="-1"><a class="header-anchor" href="#第三方中间件" aria-hidden="true">#</a> 第三方中间件</h3><p>用法就是下载之后require进来，然后挂载在app或者路由对象上</p><h2 id="_2-路由" tabindex="-1"><a class="header-anchor" href="#_2-路由" aria-hidden="true">#</a> 2.路由</h2><blockquote><p><em>Routing</em> refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).Each route can have one or more handler functions, which are executed when the route is matched.Route definition takes the following structure:</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">(</span><span class="token constant">PATH</span><span class="token punctuation">,</span> <span class="token constant">HANDLER</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><h5 id="路径匹配-path" tabindex="-1"><a class="header-anchor" href="#路径匹配-path" aria-hidden="true">#</a> 路径匹配 - PATH</h5><p>其中，端点中的路径不仅可以写一个确定的字符串，还可以使用字符串模式或者正则表达式来匹配路径，字符串模式和正则表达式匹配先跳过不谈。 还有一种情况，比如路径里面包含一个商品的id，我们如何在写路由的时候匹配呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/products/:id&#39;</span><span class="token punctuation">)</span> <span class="token comment">//匹配类似&quot;/products/123123&quot;和&quot;/products/adasasdasd&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="请求方式匹配-method" tabindex="-1"><a class="header-anchor" href="#请求方式匹配-method" aria-hidden="true">#</a> 请求方式匹配 - METHOD</h5><p>创建一个<code>routes</code>文件夹，然后创建不同的文件来处理不同的路由，比如：创建一个<code>users.js</code>来处理所有关于用户的逻辑</p><h5 id="中间件-handler" tabindex="-1"><a class="header-anchor" href="#中间件-handler" aria-hidden="true">#</a> 中间件 - HANDLER</h5><p>中间件是一个函数，它可以访问request对象、response对象</p><p>本质是一个或者多个回调函数，注意，这里可以写多个回调函数，用逗号隔开，中间的回调函数要传入next方法，且在函数末尾调用这个方法，从而继续执行下一个中间件，最后返回相应的response。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">//验证token},(req,res,next)=&gt;{//查询数据库},(req,res)=&gt;{//返回内容})</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是最原始的写法，我们不可能针对每一个请求都把验证token等通用中间件都写一次，必须要将其抽出来封装成一个函数，其他通用函数也是一样的:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>mid1<span class="token punctuation">,</span> mid2<span class="token punctuation">,</span> mid3<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	<span class="token comment">//返回</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面用一个数组将所有中间件都调用一下，调用完之后写一个箭头函数写response，注意：中间件有两个走向，如果通过中间件的逻辑，则调用<code>next()</code>将控制权教给下一个中间件，若不通过，则调用<code>res.send（err）</code>返回报错，中止代码逻辑。</p><p>小技巧：如果在不同的中间件之间传递数据？我们可以就在<code>res</code>对象上面挂一些数据即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//下一个中间件取用</span>
<span class="token keyword">let</span> myData <span class="token operator">=</span> res<span class="token punctuation">.</span>data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种方法记得要把数据清空。</p><h3 id="路由中间件" tabindex="-1"><a class="header-anchor" href="#路由中间件" aria-hidden="true">#</a> 路由中间件</h3><p>上面的写法虽然已经抽取了很多共同的逻辑，减少了代码量，但是这些路由的代码都还是写在了服务器最外层的js上，如果逻辑比较多的话，这样的写法是不好的，所以我们需要写一个专门的路由中间件，不能直接简单地使用模块化来做，这样的话我们还需要将我们的app对象在每个要用到的中间件里面导入，很麻烦，耦合度太高。</p><h2 id="_3-获取请求参数" tabindex="-1"><a class="header-anchor" href="#_3-获取请求参数" aria-hidden="true">#</a> 3.获取请求参数</h2><ul><li><p>对于get请求的参数： <code>res.query</code></p></li><li><p>post请求的参数在请求体中： <code>res.body</code> 还需要配置一个解析post参数的中间件，这个中间一定要先挂载在前面：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//此中间件已经内置</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencodes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">extended</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//只解析form-data参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果post请求传递的是json格式的参数的话，我们应该怎样解析呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//再挂载相应的应用级别的中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-静态文件" tabindex="-1"><a class="header-anchor" href="#_4-静态文件" aria-hidden="true">#</a> 4.静态文件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//将html文件放到这个里面，</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过调用 <code>express.static</code> 函数并将目录名 <code>&#39;public&#39;</code> 作为参数传递给 <code>app.use</code> 方法，我们将指定的目录设置为静态资源目录。这意味着在客户端请求的 URL 中，如果路径匹配到该目录下的文件，则 Express 会自动发送相应的文件内容给客户端。</p><p>一般不会这样将页面吐给客户，因为这只是静态的页面或其他资源，无法动态渲染，所以我们需要模板引擎进行服务端渲染</p>`,51),o=[p];function c(i,u){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","基础使用.html.vue"]]);export{d as default};
