const e=JSON.parse('{"key":"v-d1183e50","path":"/Tech/Front-end/03_VUE/v-show.html","title":"","lang":"en-US","frontmatter":{"description":"v-show指令也是条件渲染的指令，跟v-if类似，但是其区别在于： v-show会在DOM元素当中保留该元素，always会渲染，只是改变该元素的display属性，此指令不支持在template元素上使用，也不能和v-else搭配使用 v-if&nbsp;是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。v-if会监听对应的属性，为真时渲染，为假时销毁，不只是页面加载时才判断一次 v-if&nbsp;也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/03_VUE/v-show.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"v-show指令也是条件渲染的指令，跟v-if类似，但是其区别在于： v-show会在DOM元素当中保留该元素，always会渲染，只是改变该元素的display属性，此指令不支持在template元素上使用，也不能和v-else搭配使用 v-if&nbsp;是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。v-if会监听对应的属性，为真时渲染，为假时销毁，不只是页面加载时才判断一次 v-if&nbsp;也是惰性的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1,"words":301},"filePathRelative":"Tech/Front-end/03_VUE/v-show.md","excerpt":"<p>v-show指令也是条件渲染的指令，跟v-if类似，但是其区别在于：\\nv-show会在DOM元素当中保留该元素，always会渲染，只是改变该元素的display属性，此指令不支持在template元素上使用，也不能和v-else搭配使用</p>\\n<p><code>v-if</code>&nbsp;是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。<code>v-if</code>会监听对应的属性，为真时渲染，为假时销毁，不只是页面加载时才判断一次</p>\\n<p><code>v-if</code>&nbsp;也是<strong>惰性</strong>的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p>","autoDesc":true}');export{e as data};
