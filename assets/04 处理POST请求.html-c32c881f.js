import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as a,f as n}from"./app-9e438faa.js";const s={},t=n(`<h3 id="前端发送post请求" tabindex="-1"><a class="header-anchor" href="#前端发送post请求" aria-hidden="true">#</a> 前端发送post请求</h3><p>前端的发送POST请求有很多种方式，比如使用fetch函数或者XMLHttpRequest对象，但是还有一种情况是前端使用表单提交来发送POST请求，在这种方式里面<code>form</code>元素的<code>method</code>属性应为<code>post</code>，而<code>action</code>属性可以写一个url或者不写，不写的时候就是用当前的url来发送，写了之后后端服务器识别到这个post请求的url就是我们自己写的这个url</p><h3 id="数据流和缓冲区" tabindex="-1"><a class="header-anchor" href="#数据流和缓冲区" aria-hidden="true">#</a> 数据流和缓冲区</h3><p>数据从客户端发送到服务端是以二进制流的形式分批传输的，数据到达服务器之后，先会被存到机器的缓冲区，等到缓冲区的数据量达到一定的量的时候，程序才会被读取</p><p>所以我们的代码需要分段读取数据，数据传输完毕之后将数据拼到一起，最后将数据从binary的形式变成字符串或者原格式[[buffer类]]</p><p>后端服务器如何取到前端传过来的数据呢？详见[[监听器]] 使用request.on函数监听请求体的数据可用的事件以及请求体数据发送完毕的事件</p><p>因为数据是用stream的形式分批发送至后端的，我们也需要分批从缓存种去读取数据，首先创建一个空的array来接收数据，每读取一次数据，就将其保存在array里面： <code>let body = [] </code></p><p>监听缓冲区的数据是否可以读取: <code>request.on(&quot;data&quot;, (chunk)=&gt; {body.push(chunk)})</code></p><p>监听数据是否已经完全被接收： <code>request.on(&quot;end&quot;,()=&gt;console.log(body))</code> 打印出来看，body里面的数据是一行又一行我们看不懂的buffer类的数据，我们需要做如下两件事情将其转换称我们程序可读的数据：</p><ol><li>将数组里面的元素都合并成一个数据 <code>body = Buffer.concat(body)</code></li><li>将buffer类的数据转换成可读数据 <code>body = body.toString()</code> 可以将以上两个步骤合并一下： <code>body = Buffer.concat(body).toString()</code></li></ol><p>接下来进行字符串参数的拆分：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span>
body <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们就可以用访问object属性的方式来访问query参数了</p>`,13),c=[t];function d(r,p){return o(),a("div",null,c)}const l=e(s,[["render",d],["__file","04 处理POST请求.html.vue"]]);export{l as default};
