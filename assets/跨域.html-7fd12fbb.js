import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as d,a as e,b as t,d as a,f as n}from"./app-9e438faa.js";const l={},c=e("h2",{id:"inbox",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inbox","aria-hidden":"true"},"#"),t(" INBOX")],-1),p=e("p",null,"https://zxuqian.cn/videos/frontend/how-to-solve-cors-problems-for-frontend-dev/",-1),u={id:"什么是跨域​",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#什么是跨域​","aria-hidden":"true"},"#",-1),v={href:"https://zxuqian.cn/videos/frontend/how-to-solve-cors-problems-for-frontend-dev/#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F",title:"Direct link to heading",target:"_blank",rel:"noopener noreferrer"},m=n(`<p>跨域全称是跨域资源共享（Cross-Origin Resources Sharing, CORS），它是浏览器的保护机制，只允许网页请求同一域名下的服务，同一域名的要求是，协议、域名和端口都要保持一致：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://domain.com -&gt; http://domain.com/api/user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有一项不同，那么就是跨域请求：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://domain.com:3000 -&gt; http://domain.com:5000/api/user http://domain.com -&gt;https://domain.com/api/user http://domain.com -&gt; http://otherdomain.com/api/user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在前后端分离的项目中，解决跨域可以从 3 种情况下手：</p><ul><li>配置后端</li><li>配置前端</li><li>配置产品环境服务器</li></ul><p>对于传统使用 jsonp 的形式，由于不适合 react 或 vue 之类的开发，并且也有安全隐患，这里就不作介绍了。</p>`,7),g={id:"方法-1-配置后端​",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#方法-1-配置后端​","aria-hidden":"true"},"#",-1),_={href:"https://zxuqian.cn/videos/frontend/how-to-solve-cors-problems-for-frontend-dev/#%E6%96%B9%E6%B3%95-1%E9%85%8D%E7%BD%AE%E5%90%8E%E7%AB%AF",title:"Direct link to heading",target:"_blank",rel:"noopener noreferrer"},b=n(`<p>浏览器是否启用跨域保护机制是根据后端的响应来定的，所以配置后端是最直接的一种方法，浏览器根据的是响应的<code>Access-Control-Allow-Origin</code> 响应头来决定的：</p><figure><img src="https://zxuqian.cn/assets/images/2021-12-09-20-48-29-10934cee9566cb1dde726f9d640e6818.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果这个字段的值是&quot;*&quot;，那么会允许所有请求，如果是一个域名，那么浏览器就不会对这个域名下的请求进行跨域保护：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Access-Control-Allow-Origin: http://localhost:3000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据后端程序的语言和库的不同，配置 <code>Access-Control-Allow-Origin</code>响应头的方法也不同，如果使用的是 node.js 和 express，那么可以添加 cors 中间件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const cors = require(&quot;cors&quot;);app.use(cors());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cors 默认会允许所有跨域请求，如果要限制指定域名，可以给它的 origin 配置项传递一个字符串或数组，用于指定一个或多个允许跨域的域名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.use(cors({ origin: [&quot;http://domain1.com&quot;, &quot;http://domain2.com&quot;] }));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8),f={id:"方法-2-配置前端​",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#方法-2-配置前端​","aria-hidden":"true"},"#",-1),E={href:"https://zxuqian.cn/videos/frontend/how-to-solve-cors-problems-for-frontend-dev/#%E6%96%B9%E6%B3%95-2%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF",title:"Direct link to heading",target:"_blank",rel:"noopener noreferrer"},B=n(`<p>第 2 种方法，是在前端开发环境中，配置代理，中转请求，因为跨域是浏览器的保护机制，如果脱离的浏览器发送请求，是不会受到跨域保护机制的影响的，所以我们可以使用一个中转服务器来发送和接收请求，前端只需要请求这个中转服务器，并保持和中转服务器的 URL 保持一致即可。​</p><p>一般的前端脚手架工具都支持配置代理，例如 vite、create react app 等，这里以 vite 为例， vite 自带的开发服务器支持设置代理，在 vite.config.js 文件里，我们可以配置 server 配置项下的 proxy 配置，把对 /api 路径的请求代理转发到真实的后端服务路径，再根据需要，对转发的 URL 进行改写。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server: { proxy: { &quot;/api&quot;: { target: &quot;http://localhost:5000&quot;, changeOrigin:true, rewrite: (path) =&gt; path.replace(/^\\/api/, &quot;&quot;), }, }, },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的配置项把前端请求的 /api 路径转发到 http://localhost:5000/，并把 /api 这一段删除，因为这里后端提供的 API 中不带 /api 这一段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/api -&gt; http://localhost:5000 /api/user -&gt; http://localhost:5000/user
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样在开发的时候，就避免了跨域问题。前端应用中可以直接请求 proxy 中配置的 /api 来请求后端服务，不用再写前边的协议、域名和端口了，因为默认是和前端相同的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fetch(&quot;/api&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候，如果去掉后端的跨域支持，前端仍然能请求后端的数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// const cors = require(&quot;cors&quot;);// app.use(cors());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),w={id:"方法-3-产品环境​",tabindex:"-1"},A=e("a",{class:"header-anchor",href:"#方法-3-产品环境​","aria-hidden":"true"},"#",-1),k={href:"https://zxuqian.cn/videos/frontend/how-to-solve-cors-problems-for-frontend-dev/#%E6%96%B9%E6%B3%95-3%E4%BA%A7%E5%93%81%E7%8E%AF%E5%A2%83",title:"Direct link to heading",target:"_blank",rel:"noopener noreferrer"},D=n(`<p>对于产品环境，或者开发服务器不支持代理的情况下，我们可以自己手动创建一个中转服务器来代理请求。 假设我们打包好的前端项目放到了 dist 目录下，入口文件为 index.html：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dist |-- index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以使用 express 来创建一个服务器，负责发送前端页面，并代理请求。例如我们这里把让请求都返回 dist 下的 index.html 文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.use(express.static(&quot;dist&quot;));// serve index.html for all routesapp.get(&quot;*&quot;, (req, res) =&gt; {  res.sendFile(__dirname + &quot;/dist/index.html&quot;);});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是对于 /api 这个路径，我们还是需要配置代理，这里需要安装 <code>http-proxy-middleware</code> 依赖库，它和 vite 底层使用的代理服务是一样的，配置也几乎一样，不同的是 vite 中 rewrite 配置项这里叫作 pathRewrite：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const { createProxyMiddleware } = require(&quot;http-proxy-middleware&quot;);app.use(  &quot;/api&quot;,  createProxyMiddleware({    target: &quot;http://localhost:5000&quot;,    changeOrigin: true,    // 这里是 pathRewrite，跟 vite 不太一样    pathRewrite: (path) =&gt; path.replace(/^\\/api/, &quot;&quot;),  }));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，我们再启动这个服务器来负责展现前端产品环境的页面，可以看到，仍然可以成功的请求的后端的数据。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node server_production.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​</p><p>除了使用 express，也可以使用 nginx 等专业的服务器程序，你可以参考相关文档来配置代理。</p>`,10),y={id:"小结​",tabindex:"-1"},z=e("a",{class:"header-anchor",href:"#小结​","aria-hidden":"true"},"#",-1),F={href:"https://zxuqian.cn/videos/frontend/how-to-solve-cors-problems-for-frontend-dev/#%E5%B0%8F%E7%BB%93",title:"Direct link to heading",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"好了，这个就是如何解决前端跨域的方法，你学会了吗？如果有帮助请三连，想学更多有用的前端开发知识，请关注峰华前端工程师，感谢观看！",-1);function R(C,N){const i=o("ExternalLinkIcon");return r(),d("div",null,[c,p,e("h2",u,[h,t(" 什么是跨域"),e("a",v,[t("​"),a(i)])]),m,e("h2",g,[x,t(" 方法 1：配置后端"),e("a",_,[t("​"),a(i)])]),b,e("h2",f,[q,t(" 方法 2：配置前端"),e("a",E,[t("​"),a(i)])]),B,e("h2",w,[A,t(" 方法 3：产品环境"),e("a",k,[t("​"),a(i)])]),D,e("h2",y,[z,t(" 小结"),e("a",F,[t("​"),a(i)])]),O])}const L=s(l,[["render",R],["__file","跨域.html.vue"]]);export{L as default};
