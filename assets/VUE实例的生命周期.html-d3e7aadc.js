import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as t,f as p}from"./app-9e438faa.js";const r={},d=p('<blockquote><p>在vue组件中，生命周期指的是从组件创建开始，到组件销毁，所经历的整个过程；在这个过程中的一些不同的阶段，vue会调用指定的一些组件方法。基本生命周期函数有下面几个阶段：创建阶段、挂载阶段、更新阶段、卸载阶段、其它。</p></blockquote><figure><img src="https://img.php.cn/upload/article/000/000/024/61c966f474789601.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>![[Pasted image 20221018144039.png]]</p><p><strong>1、组件生命周期</strong></p><p>组件生命周期指的是组件从创建到销毁的过程，在这个过程中的一些不同的阶段，<code>vue</code> 会调用指定的一些组件方法。</p><p>基本生命周期函数有下面几个阶段：</p><ul><li>创建阶段</li><li>挂载阶段</li><li>更新阶段</li><li>卸载阶段</li><li>其它</li></ul><p>每一个阶段都对应着 <code>之前</code> 和 <code>之后</code> 两个函数。<br><img src="https://img.php.cn/upload/article/000/000/024/7f97440a7d3d597423c693a36b944098-0.png" alt="在这里插入图片描述" loading="lazy"></p><p><strong>2、创建阶段</strong></p><h3 id="_2-1、beforecreate" tabindex="-1"><a class="header-anchor" href="#_2-1、beforecreate" aria-hidden="true">#</a> 2-1、beforeCreate()</h3><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。初始化阶段，应用不多。</p><h3 id="_2-2、created" tabindex="-1"><a class="header-anchor" href="#_2-2、created" aria-hidden="true">#</a> 2-2、created()</h3><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，<code>$el</code> property 目前尚不可用。</p><p><strong>3、挂载阶段</strong></p><p><strong>3-1、beforeMount()</strong></p><p>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</p><p><strong>3-2、mounted()</strong></p><p>该阶段执行完了模板解析，以及挂载。同时组件根组件元素被赋给了 <code>$el</code> 属性，该阶段可以通过 DOM 操作来对组件内部元素进行处理了。</p><p><strong>4、更新阶段</strong></p><p><strong>4-1、beforeUpdate()</strong></p><p>数据更新时调用，但是还没有对视图进行重新渲染，这个时候，可以获取视图更新之前的状态。</p><p><strong>4-2、updated()</strong></p><p>由于数据的变更导致的视图重新渲染，可以通过 DOM 操作来获取视图的最新状态。</p><p><strong>5、卸载阶段</strong></p><p><strong>5-1、beforeDestroy()</strong></p><p>实例销毁之前调用，移除一些不必要的冗余数据，比如定时器。</p><p><strong>5-2、destroyed()</strong></p><p>Vue 实例销毁后调用。</p><p><strong>6、其它</strong></p><p><strong>6-1、.$nextTick()</strong></p><p>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上。</p><p>与 <code>updated</code> 有些类似，<code>this.$nextTick()</code> 可以用作局部的数据更新后DOM更新结束后的操作，全局的可以用 <code>updated</code> 生命周期函数。</p><p><strong>6-2、errorCaptured()</strong></p><p>当捕获一个来自子孙组件的错误时被调用，此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播。</p><p><strong>7、生命周期的一些使用场景</strong></p><p>**created：**进行ajax请求异步数据的获取、初始化数据</p><p>**mounted：**挂载元素dom节点的获取</p><p>**$nextTick：**针对单一事件更新数据后立即操作dom</p><p>**updated：**任何数据的更新</p>',39),c=[d];function n(a,s){return o(),t("div",null,c)}const l=e(r,[["render",n],["__file","VUE实例的生命周期.html.vue"]]);export{l as default};
