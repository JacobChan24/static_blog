import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as e,a as n,b as a,d as i,f as c}from"./app-9e438faa.js";const l={},u=n("h3",{id:"_0-reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-reference","aria-hidden":"true"},"#"),a(" 0 - Reference")],-1),r={href:"https://softchris.github.io/pages/joi.html#introducing-joi",target:"_blank",rel:"noopener noreferrer"},k=c(`<p>https://www.digitalocean.com/community/tutorials/how-to-use-joi-for-node-api-schema-validation</p><p>https://github.com/hapijs/joi/blob/v14.3.1/API.md</p><h3 id="_1-overview" tabindex="-1"><a class="header-anchor" href="#_1-overview" aria-hidden="true">#</a> 1 - Overview</h3><p>用户在填写表单的时候，从前端填写完成数据，发起http请求到后端，到最后数据落库，数据验证的过程是必不可少的，数据验证包括了是否为空、数据类型是否正确和长度大小的检测，我们可以在如下的几个层面进行数据的验证：</p><ol><li>前端： <ol><li>页面：填写的表单的时候在元素样式上的数据验证</li><li>JS发起post请求时在js层面上人为地去进行数据验证</li></ol></li><li>后端：后端接收到数据到请求数据库之间也可以进行一些数据地验证，可以使用Joi等后端的库辅助进行验证</li><li>数据库： 数据库在定义的时候也有一些数据类型和是否为空的限制</li></ol><h3 id="_2-joi-tutorial" tabindex="-1"><a class="header-anchor" href="#_2-joi-tutorial" aria-hidden="true">#</a> 2 - Joi tutorial</h3><p>首先，这个包就是在上面所述的第2个层面来进行验证 <code>npm install Joi</code></p><h5 id="_2-1-creating-a-schema-using-joi-object" tabindex="-1"><a class="header-anchor" href="#_2-1-creating-a-schema-using-joi-object" aria-hidden="true">#</a> 2.1 Creating a schema using <code>Joi.object()</code></h5><p>To begin with, we have to write like this: <code>const schema = Joi.object().keys({})</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Joi<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
 <span class="token literal-property property">name</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alphanum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">birthyear</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2013</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>what <code>Joi</code> supports:</p><ul><li><strong>string</strong>, this says it needs to be of type string, and we use it like so <code>Joi.string()</code></li><li><strong>number</strong>, Joi.number() and also supporting helper operations such as min() and max(), like so <code>Joi.number().min(1).max(10)</code></li><li><strong>required</strong>, we can say whether a property is required with the help of the method required, like so <code>Joi.string().required()</code></li><li><strong>any</strong>, this means it could be any type, usually we tend to use it with the helper allow() that specifies what it can contain, like so, <code>Joi.any().allow(&#39;a&#39;)</code></li><li><strong>optional</strong>, this is strictly speaking not a type but has an interesting effect. If you specify for example prop : <code>Joi.string().optional</code>. If we don&#39;t provide prop then everybody&#39;s happy. However if we do provide it and make it an integer the validation will fail</li><li><strong>array</strong>, we can check wether the property is an array of say strings, then it would look like this <code>Joi.array().items(Joi.string().valid(&#39;a&#39;, &#39;b&#39;)</code></li><li><strong>regex</strong>, it supports pattern matching with RegEx as well like so <code>Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/)</code></li></ul><p>We can also using it in nesting manner to address complicated json object data:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> blogPostSchema <span class="token operator">=</span> Joi<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
  <span class="token literal-property property">title</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alphanum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">description</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">comments</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>Joi<span class="token punctuation">.</span>object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
    <span class="token literal-property property">description</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">author</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">grade</span><span class="token operator">:</span> Joi<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-validate-our-data-using-joi-validate" tabindex="-1"><a class="header-anchor" href="#_2-2-validate-our-data-using-joi-validate" aria-hidden="true">#</a> 2.2 Validate our data using <code>Joi.validate()</code></h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> Joi<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>myData<span class="token punctuation">,</span> schema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16);function d(h,m){const s=o("ExternalLinkIcon");return p(),e("div",null,[u,n("p",null,[n("a",r,[a("推荐：讲得很全"),i(s)])]),k])}const f=t(l,[["render",d],["__file","01 Joi 数据验证 Data Validation.html.vue"]]);export{f as default};
