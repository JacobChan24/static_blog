const e=JSON.parse('{"key":"v-68dc71ee","path":"/Tech/Backend/nodeJS/%E5%9F%BA%E7%A1%80/%E6%B5%81%E5%92%8C%E7%AE%A1%E9%81%93.html","title":"","lang":"en-US","frontmatter":{"description":"概述 流（Stream）是一种可读性和可写性的数据处理接口，用于在程序中以逐块（chunk）的方式处理数据。流可以将大数据拆分为小块，逐个处理，而不需要将整个数据加载到内存中。 管道（Pipe）是一种流之间的连接，允许数据从一个流中流动到另一个流中。通过管道，可以将一个流的输出直接传输给另一个流，而无需手动处理数据的读取和写入。 使用流和管道可以带来多个好处，包括： 内存效率：通过流的方式逐块处理数据，不需要将整个数据加载到内存中，减少了内存的占用。 响应性：流允许边读取数据边处理，可以更快地开始处理数据，而不需要等待全部数据加载完毕。 可扩展性：流和管道可以轻松地组合和连接，构建复杂的数据处理流程。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Backend/nodeJS/%E5%9F%BA%E7%A1%80/%E6%B5%81%E5%92%8C%E7%AE%A1%E9%81%93.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"概述 流（Stream）是一种可读性和可写性的数据处理接口，用于在程序中以逐块（chunk）的方式处理数据。流可以将大数据拆分为小块，逐个处理，而不需要将整个数据加载到内存中。 管道（Pipe）是一种流之间的连接，允许数据从一个流中流动到另一个流中。通过管道，可以将一个流的输出直接传输给另一个流，而无需手动处理数据的读取和写入。 使用流和管道可以带来多个好处，包括： 内存效率：通过流的方式逐块处理数据，不需要将整个数据加载到内存中，减少了内存的占用。 响应性：流允许边读取数据边处理，可以更快地开始处理数据，而不需要等待全部数据加载完毕。 可扩展性：流和管道可以轻松地组合和连接，构建复杂的数据处理流程。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"Tech/Backend/nodeJS/基础/流和管道.md","excerpt":"<h3> 概述</h3>\\n<p>流（Stream）是一种可读性和可写性的数据处理接口，用于在程序中以逐块（chunk）的方式处理数据。流可以将大数据拆分为小块，逐个处理，而不需要将整个数据加载到内存中。</p>\\n<p>管道（Pipe）是一种流之间的连接，允许数据从一个流中流动到另一个流中。通过管道，可以将一个流的输出直接传输给另一个流，而无需手动处理数据的读取和写入。</p>\\n<p>使用流和管道可以带来多个好处，包括：</p>\\n<ul>\\n<li>内存效率：通过流的方式逐块处理数据，不需要将整个数据加载到内存中，减少了内存的占用。</li>\\n<li>响应性：流允许边读取数据边处理，可以更快地开始处理数据，而不需要等待全部数据加载完毕。</li>\\n<li>可扩展性：流和管道可以轻松地组合和连接，构建复杂的数据处理流程。</li>\\n</ul>","autoDesc":true}');export{e as data};
