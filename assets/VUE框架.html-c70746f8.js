import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,f as l}from"./app-9e438faa.js";const t={},d=l(`<h5 id="_1vue框架中创建一个新的页面" tabindex="-1"><a class="header-anchor" href="#_1vue框架中创建一个新的页面" aria-hidden="true">#</a> ①VUE框架中创建一个新的页面</h5><ol><li>新建路由</li><li>新建VUE页面</li></ol><h6 id="_1-新建路由" tabindex="-1"><a class="header-anchor" href="#_1-新建路由" aria-hidden="true">#</a> 1. 新建路由</h6><p>默认的路由文件是src/router/index.js，打开如下： ![[Pasted image 20220711215022.png]] 首先在上面import这个页面文件，@代表当前目录： <code>import 内部名字 from &#39;@/components/pagename</code></p><p>然后在下面的数组里面增加一个对象，对象中包括如下三个属性：</p><ol><li>path // 对应url</li><li>name //对应内部使用的名字</li><li>component //对应components文件夹下页面文件的名字</li></ol><h6 id="_2-新建页面" tabindex="-1"><a class="header-anchor" href="#_2-新建页面" aria-hidden="true">#</a> 2. 新建页面</h6><p>新建一个VUE文件，空白模板如下： ![[Pasted image 20220711215714.png]] 其中template, script和style标签分别代表一个页面的html, javascript和css代码，我们直接在一个文件里面编写网页代码</p><p>新建之后我们就可以通过路由代码里新增的url来访问新的页面了</p><p><em>定义一个变量</em> 要为页面增加变量，则需要在对应的VUE页面文件的script部分中定义，代码如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script&gt;
export default {
  data () {
  return {
	  variable: value
      }
  }
}
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住这种定义方式即可，其实本质上就是定义了一个data函数，其中的变量就是函数对象的属性。</p><h5 id="_2vue如何定义中如何定义全局变量" tabindex="-1"><a class="header-anchor" href="#_2vue如何定义中如何定义全局变量" aria-hidden="true">#</a> ②VUE如何定义中如何定义全局变量？</h5><p>答案是：在最外层的index.html的script脚本中直接定义即可，如下图所示： ![[Pasted image 20220711221003.png]] 为什么在这个文件里面定义呢？这个需要先了解一下VUE框架下页面渲染的过程与原理[[VUE页面渲染原理]]</p><h5 id="_3导入和导出代码" tabindex="-1"><a class="header-anchor" href="#_3导入和导出代码" aria-hidden="true">#</a> ③导入和导出代码</h5><ul><li>导入外部代码 -- import <ul><li>什么场景下需要导入代码？ <ul><li>路由js中将页面文件导入</li><li>使用其余组件/页面的方法、属性和数据</li></ul></li><li>导入的具体方法： <ul><li><code>import NAME (as alias) from &lt;packageName/package path&gt;</code></li><li><code>import {method/data/attribute} from &lt;packageName/package path&gt; </code></li><li>如果要导入的包名在package.json中有定义的话，则直接导入包名，否则写本地文件路径，@代表源代码src文件根目录</li></ul></li></ul></li><li>导出代码 <ul><li>为什么要到处代码？</li><li>导出的具体实现： <ul><li>在每个VUE页面或者组件文件中的script标签里面，都存在export default{ }的代码，这样的写法就是为了方便其余代码对这个代码进行引用！非常方便</li><li>将某页面或者组件带入之后，就可以用<code>object.attribute/dmethod()</code>的方式使用引入代码里面的属性、方法或变量了了</li></ul></li></ul></li></ul><h5 id="_4箭头函数的写法" tabindex="-1"><a class="header-anchor" href="#_4箭头函数的写法" aria-hidden="true">#</a> ④箭头函数的写法</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method.then(response =&gt; function body)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样的写法可以避免很多作用域的问题</p>`,19),r=[d];function n(s,c){return i(),a("div",null,r)}const p=e(t,[["render",n],["__file","VUE框架.html.vue"]]);export{p as default};
