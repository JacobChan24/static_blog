import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as s,b as n,d as i,f as a}from"./app-9e438faa.js";const l={},u=a('<p>原文链接： https://www.freecodecamp.org/chinese/news/what-is-promise-in-javascript-for-beginners/ [[网络请求与异步]][[并发并行异步同步]]</p><h2 id="什么是-promise" tabindex="-1"><a class="header-anchor" href="#什么是-promise" aria-hidden="true">#</a> 什么是 Promise</h2><p>想象一下，你准备面试某个公司的前端工程师。</p><p>你走进面试会场，当面试马上要开始时你发现简历忘带了，这时你怎么办？</p><p>你没有气馁。因为你很幸运，你有一个室友。</p><p>你马上给室友打电话寻求帮助，恳求室友帮你找到简历。你的室友<strong>承诺</strong>他一旦找到就立马回你消息。</p><p>假设简历被找到，室友给你回复信息：</p><blockquote><p>“太好了，我找到你的简历了！”</p></blockquote><p>但是如果室友没有找到，他就要回复一条失败的信息，并解释他为什么没有找到简历。比如，他可能给正在面试的你发如下信息：</p><blockquote><p>“对不起，我没有找到你的简历，因为你的保险柜钥匙丢了。”</p></blockquote><p>与此同时，面试还要继续。但面试官并没有拿到真实的简历，而是得到一个<strong>正在找简历</strong>的承诺，同时面试官把该简历的状态设置成<strong>进行中（PENDING）</strong>。</p><p>你回答了所有问题。但不幸的是，能否得到这个工作还要依赖你简历的<strong>最终状态（FINAL STATUS）</strong>。</p><p>你的室友终于回消息了。正如我们前面讨论过的，如果他没有找到简历，他就需要发一个失败的信息并解释为什么没有找到。</p><p>如果是这种情况，面试结束，你被 <strong>拒绝（Rejected）</strong> 了。</p><p>如果室友找到了简历，他会很高兴的告诉你他找到了，而你将继续面试，并 <strong>获得（FULFILL）</strong> 这份工作。</p><h2 id="如何把上述过程翻译成-js-代码" tabindex="-1"><a class="header-anchor" href="#如何把上述过程翻译成-js-代码" aria-hidden="true">#</a> 如何把上述过程翻译成 JS 代码</h2><p>室友承诺找简历并回复信息的过程等同于我们在 JavaScript 中定义一个 Promise。定义 Promise 并不能直接或立即获得返回值，而是返回一个 Promise 对象。这个 Promise 对象在一段时间后会接收返回值。</p><p>Promise 对象是异步的，这就意味着程序需要花点时间才能获得结果。这和找简历是一样的，都需要花点时间去找。</p><p>基于这个原因，在找的这个时间里，面试官并不是什么都没做，而是基于<strong>简历一会儿就找到</strong>的承诺，他们依然开始面试候选人。在这个场景里，我们用<strong>简历一会儿就找到</strong>的承诺替换了<strong>真实的简历</strong>。</p><p>同理，JS 引擎也并不是等着什么也不做，而是继续执行后续代码，并将返回的Promise对象状态设置为 <strong>Pending</strong>。</p><p>回复信息包含是否找到简历的状态信息。对于Promise对象来说，回复信息被称作返回值。</p><p>如果回复信息是 “success”，我们将录取候选人。如果是 “failure”，我们不录取该候选人。</p>',22),r={href:"https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"then()",-1),k=a(`<p>为了指定如何调用回调函数，需要使用以下两个方法：</p><ul><li><code>resolve(value)</code>: 表明 Promise 任务成功，调用<code>then()</code>的成功回调函数。</li><li><code>reject(error)</code>: 表明 Promise 任务失败，调用<code>then()</code>的错误回调函数。</li></ul><p>如果 Promise 成功，则调用成功回调，如果失败，调用失败回调。所以<code>then()</code>中其实应该传入两个回调函数，一个成功回调，一个失败回调，当只传一个的时候，默认为成功回调，我们一般只写成功回调，然后用<code>catch()</code>处理所有的报错</p><p>在异步任务完成之前，Promise 只是一个占位符。当你定义了一个 Promise，你并不会<strong>立即</strong>获得返回值，而是获得一个 Promise 对象。</p><h2 id="如何在-javascript-中使用-promise" tabindex="-1"><a class="header-anchor" href="#如何在-javascript-中使用-promise" aria-hidden="true">#</a> 如何在 JavaScript 中使用 Promise</h2><p>你可以通过<code>Promise</code>类定义一个 Promise 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;this is the eventual value the promise will return&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 1</p><p>在控制台运行将返回一个<code>Promise</code>对象：</p><figure><img src="https://www.freecodecamp.org/news/content/images/2021/08/promise-console-1.png" alt="promise-console-1" tabindex="0" loading="lazy"><figcaption>promise-console-1</figcaption></figure><p>除了通过构造函数声明一个 Promise 对象外，还可以使用 Promise 内置的 API 进行声明：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> anotherPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;this is the eventual value the promise will return&quot;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2</p><p>示例 1 中的 Promise 等待 3s 后获取到成功返回的信息：<code>this is the eventual...</code>，而示例 2 中将立即获取到成功返回的信息。</p><h2 id="javascript-promise-中的错误处理" tabindex="-1"><a class="header-anchor" href="#javascript-promise-中的错误处理" aria-hidden="true">#</a> JavaScript Promise 中的错误处理</h2><p>Promise 对象也能被_rejected_。大多数时候，<strong>rejected</strong> 的发生是因为执行异步任务的时候抛出了错误，此时就会调用<code>reject()</code>方法。</p><p>下面的示例展示了一个 Promise 对象是如何执行 reject 方法的:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a is found!&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;sorry, no a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3</p><p>你能想到 Promise 被 rejected 的原因吗？如果你的答案是：<code>a</code>的值是 false，那么恭喜你答对了。</p><p>在示例 3 中，代码执行 3s 后将调用 reject 方法，因为<code>(a)?</code>表达式的值是 false，所以触发<code>reject</code>方法。</p><h2 id="promise-的链式调用" tabindex="-1"><a class="header-anchor" href="#promise-的链式调用" aria-hidden="true">#</a> Promise 的链式调用</h2><p>当 Promise 返回了某个值，通常你都会对返回值进行处理。</p><p>比如，你发送了一个网络请求，你期望获取数据并展示在页面上。</p><p>你可以定义两个回调函数，当 Promise 返回成功或失败时进行回调。这两个回调函数定义在<code>then()</code>内：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> anotherPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;this is the eventual value the promise will return&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// CONTINUATION</span>
anotherPromise
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 4</p><p>示例 4 的代码在 3s 后返回成功信息：</p><figure><img src="https://www.freecodecamp.org/news/content/images/2021/08/EVENTAL-RETURN.png" alt="EVENTAL-RETURN" tabindex="0" loading="lazy"><figcaption>EVENTAL-RETURN</figcaption></figure><p>原则上你可以无限链式调用，调用链会依次执行，而且前一个 then 的返回值作为参数传入后一个 then。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> anotherPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;this is the eventual value the promise will return&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

anotherPromise
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fulfillFn<span class="token punctuation">,</span> rejectFn<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fulfilFn<span class="token punctuation">,</span> rejectFn<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 5</p><p>但我们还是遗漏了重要的内容。</p><p>要时刻记住，<code>then()</code>方法必须有两个回调函数：第一个参数是成功回调，第二个参数是错误回调。</p><p>在示例 4 和示例 5 中都没有传入第二个回调函数。因此，如果代码报错，就没有错误回调捕获错误信息。</p><p>如果你执意要在<code>then()</code>中只定义一个回调函数（即成功回调），那么你就需要在 Promise 调用链的末端调用<code>catch()</code>方法捕获任何可能的报错信息。</p><h3 id="如何在-js-中使用catch-方法" tabindex="-1"><a class="header-anchor" href="#如何在-js-中使用catch-方法" aria-hidden="true">#</a> 如何在 JS 中使用<code>catch()</code>方法</h3><p>在 Promise 调用链上，无论哪个环节报错，<code>catch()</code>方法都会被调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a is found!&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;sorry, no a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

myPromise
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 6</p><p>因为<code>myPromise</code>最终状态是 rejected，<code>then()</code>方法中的成功回调被忽略。而<code>catch()</code>方法中的错误回调被执行，并在控制台打印如下错误信息：</p><figure><img src="https://www.freecodecamp.org/news/content/images/2021/08/Catch.png" alt="Catch" tabindex="0" loading="lazy"><figcaption>Catch</figcaption></figure>`,42);function m(v,g){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("在 Promise 中，我们通过"),s("a",r,[n("回调函数"),i(e)]),n("处理Promise的返回值。这些处理函数定义在"),d,n("方法中。")]),k])}const f=t(l,[["render",m],["__file","异步编程 Promise.html.vue"]]);export{f as default};
