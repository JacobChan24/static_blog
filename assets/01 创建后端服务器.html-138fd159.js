import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-9e438faa.js";const t={},p=e(`<h3 id="服务器端口" tabindex="-1"><a class="header-anchor" href="#服务器端口" aria-hidden="true">#</a> 服务器端口</h3><ul><li>创建服务器的时候，需要设置端口，服务器会一直监听这个端口，看是否有请求进来，有请求进来之后根据不同的请求来返回特定的内容；</li><li>一般服务器都会运行好几个服务，像邮件服务和ftp服务，这些服务都有自己的端口，邮件服务的端口是25，FTP的服务端口是21</li><li>端口0-1023都是系统保留的端口号，我们不能用，我们可以自定义用3000/5000类似的</li></ul><h3 id="使用http-module创建服务器" tabindex="-1"><a class="header-anchor" href="#使用http-module创建服务器" aria-hidden="true">#</a> 使用http module创建服务器</h3><ol><li><p>导入模块 <code>const http = require(&#39;http&#39;)</code> http模块会返回一个object，我们将其赋予给一个const变量</p></li><li><p>创建服务器 <code>const server = http.createServer()</code> 函数返回一个server的object</p></li><li><p>在服务器中创建请求监听器 监听器的本质就是一个函数</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello from nodeJS server&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>服务器开始监听 调用<code>server.listen()</code>函数，这个函数有三个参数： <ol><li>端口</li><li>服务器IP地址</li><li>回调函数：服务器开始监听请求的时候开始调用，一般用来显示服务器开始运行的一些信息</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span>
<span class="token keyword">const</span> ip <span class="token operator">=</span> <span class="token string">&#39;127.0.0.1&#39;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server is running at http server http://\${ip}:\${port}&#39;</span><span class="token punctuation">)</span> <span class="token comment">//服务器打印变量</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><p>启动服务器 服务器的代码本质是一个js文件，需要先在服务器上先进入到服务器js代码所在的目录，然后使用node命令启动服务器就行： <code>node server.js</code></p></li><li><p>注意：每次更新服务器的代码之后都必须重新启动服务器</p></li></ol>`,8),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","01 创建后端服务器.html.vue"]]);export{d as default};
