import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as s}from"./app-9e438faa.js";const l={},i=s('<p>四个基础对象：</p><ol><li>流对象</li><li>数据</li><li>连接对象</li><li>泳道</li></ol><h2 id="_1-流对象-flow-object" tabindex="-1"><a class="header-anchor" href="#_1-流对象-flow-object" aria-hidden="true">#</a> 1.流对象(flow object)</h2><p>定义业务流程的主要图形元素，包括三种事件：</p><ul><li>事件(event)</li><li>活动(activities) <ul><li>任务(task)</li><li>子流程(sub-process)</li></ul></li><li>流(flow)</li><li>网关(gateway)</li></ul><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h4><p><strong>事件代表一种状态，而不是一个具体动作，它是动作的触发器</strong>，如果对一件事情的中文描述可以用：发生了、完成了、出现了、收到了，在流程图上就会被归类为事件，事件的图形表示为： ![[Pasted image 20230713113122.png]]</p><ul><li>中间事件 用于事件网关或者也可以独立使用 ![[Pasted image 20230713122621.png]] ![[Pasted image 20230713122643.png]]</li></ul><h4 id="活动" tabindex="-1"><a class="header-anchor" href="#活动" aria-hidden="true">#</a> 活动</h4><p>从开始状态到结束状态，中间有很多事情要做，而每一件事情就是这样一个<em>活动(activity)</em>，在中文里面我们用动宾短语描述一个活动，其图形表示为： ![[Pasted image 20230713113521.png]] 任务是原子化的，活动不一定需要是原子化的，也可以是笼统的，如果活动比较大，不适合在当前的流程中展示细节的话，我们用*子流程(sub-process)*表示 ![[Pasted image 20230713113930.png]]</p><h4 id="流" tabindex="-1"><a class="header-anchor" href="#流" aria-hidden="true">#</a> 流</h4><p><em>顺序流(sequence flow)</em> 和 <em>消息流(message flow)</em> 顺序流将流程图上所有的事件和活动串起来，表达其先后关系，但是顺序流只能用于同一个池里面，跨池的通讯需要用信息流（跨部门或者公司的合作需要正式的通知）。</p><p>另外，訊息流（Message Flow）的傳遞可以用任務（Task）來表示發訊息，如「發送信件」。相對的，對方也可以用「收取信件」的任務（Task）來表示收到訊息；當然也可以用事件（Event）來表達收到訊息。</p><h4 id="网关" tabindex="-1"><a class="header-anchor" href="#网关" aria-hidden="true">#</a> 网关</h4><p>我们如何表达“同步并行任务”，“有条件执行任务”等这些逻辑呢？使用网关(gateway)来表达。所有网关的图形外层都是一个菱形，<strong>作用是就流程分开或者合并，赋予流程逻辑判断的能力</strong>。具体不同逻辑关系的表达如下：</p><ul><li><strong>唯一判断符号 - 排他网关(Exclusive Gateway)</strong><em>独一性</em>，<em>按顺序的条件判断</em> 表示流程會在此關口<strong>分流</strong>，而且<strong>只能選擇一個順序流繼續走</strong>，判斷的方式則會寫在順序流上，並且被依序判斷，如果符合，則執行該流向的活動，並且<strong>停止判斷其他條路徑</strong>。</li></ul><p>它的符號，是在菱形的框框內加上「×」，或是不加任何符號保持空白。 ![[Pasted image 20230713120033.png]]</p><ul><li><strong>多次判斷符號－包容關口（Inclusive Gateway）</strong><em>都可以走</em>，<em>最好有预设道路</em> 包容關口 （Inclusive Gateway），則是判斷之後<strong>雖會執行該路徑，但不會排擠其他的選擇</strong>，也就是說可能每一條路徑都走，但也可能一條都不走。</li></ul><p>它的符號，是在菱形的框框內加上「⚪」。 ![[Pasted image 20230713120248.png]] 上示流程圖中，當判斷為非瑕疵品時，會與客人說明瑕疵品的定義。</p><p>如果為一級瑕疵品時，則會發送維修申請。</p><p>但如是二級的瑕疵品，因為它同時滿足≥一級瑕疵品，也滿足≥二級瑕疵品，所以不但會發送維修申請，也會提供賠償。</p><p>在設計流程圖時，為了確保流程會持續進行，因此，只要使用包容關口（Inclusive Gateway）符號，都最好有一個預設路徑，或是至少有要能符合其中一個條件，不然有可能會莫名地中斷流程。</p><ul><li><strong>流程圖的分流符號－並行關口（Parallel Gateway）</strong><em>强制满足所有条件</em> 並行關口（Parallel Gateway）不同於其他關口，它並不具備判斷功能，而是必須全部都做、全部滿足，<strong>它的用途就是純粹的分流、合併</strong>。</li></ul><p>它的符號，是在菱形的框框內加上「+」。 ![[Pasted image 20230713121610.png]] 如圖中，就表示在確認訂單與產品後，就要同步並行「與客說明瑕疵品定義」、「發送檢修申請」、「發送維修申請」，三者缺一不可。</p><p>因此，並行關口（Parallel Gateway），也同時表達了這些活動沒有必須遵循的順序，是可以同時執行的。</p><p>並行關口（Parallel Gateway）還有合併的用途，也就是「只有三件事情都完成，才可以做下一步」。</p><ul><li><strong>複雜流程的判斷－複雜關口（Complex Gateway）</strong><em>补充说明</em>，<em>依托于流程外的中间事件</em> 複雜關口（Complex Gateway），則用於表達較為複雜的情況，它有和包容關口（Inclusive Gateway）類似的概念，也就是<strong>只要條件符合就可以執行</strong>。</li></ul><p>通常，判斷較難在流程中呈現、需要額外說明、輔助文件時，就可以使用複雜關口。</p><p>它的符號，是在菱形的框框內加上類似「＊」圖案。 ![[Pasted image 20230713122046.png]] 複雜關口 （Complex Gateway）也具備並行關口（Parallel Gateway）的合併特色，但它未必要所有條件滿足，可以只滿足部分條件。例如： ![[Pasted image 20230713122101.png]] 如上圖就是並行關口（Parallel Gateway）、複雜關口 （Complex Gateway）的綜合運用，它表達的是當客訴來的時候，就需要和客戶詢問4項資訊。</p><p>但電戶、帳戶名稱、收件地址只要有其中2項符合，再加上訂單與產品資訊，就可以執行下一步的維修申請。</p><ul><li><strong>事件判斷符號－事件關口（Event-Based Gateway）</strong><em>独一性</em>，<em>流程外的事件决定走向</em> 事件關口（Event-Based Gateway），雖然同樣有判斷性，但它的<strong>判斷是來自於非流程內的項目，是以事件作為觸發點</strong>（Trigger）。</li></ul><p>它還具備了排他關口（Exclusive Gateway）的排他性，也就是<strong>只執行一個路徑的項目</strong>，但因為是以事件觸發，所以是「誰先發生，就做那一個」。 ![[Pasted image 20230713122358.png]] 圖中的例子，表示當「接到同位客人的客訴」或「客訴兩天後」，才會開始處理客訴。</p><p>但如果先發生了「不同的客人、在兩天內，總共的客訴數量達到30筆」時，則是先召開部門大會，在開會之後，即便到了已經2天後，或是接到同一位客訴，也不會再回過頭處理。</p><p>另外，之前也提到過，因為事件和活動某種程度是可以互相替代的，因此「收到信件的事件」也可用「收取信件的活動」來表達。</p><h2 id="_2-分工与协作" tabindex="-1"><a class="header-anchor" href="#_2-分工与协作" aria-hidden="true">#</a> 2.分工与协作</h2><p>不同的活动的执行人可能属于不同的部门或单位，且触发的事件(event)也可能属于不同单位的对象或被不同的单位监管，我们用<em>池(pool)</em> 来区分不同的人，部门，公司，职位等，当一个池里面还要做更加细致的区分的话，我们用<em>泳道(lane)</em> 来区分: ![[Pasted image 20230713114544.png]]</p><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3.总结</h2><p>![[Pasted image 20230713115127.png]] ![[Pasted image 20230713115143.png]] ![[Pasted image 20230713122731.png]] ![[Pasted image 20230713122739.png]] ![[Pasted image 20230713122745.png]] ![[Pasted image 20230713122751.png]]</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2><p>https://medium.com/doflowy/sop%E8%A3%BD%E4%BD%9C%E6%95%99%E5%AD%B8-%E6%B5%81%E7%A8%8B%E5%9C%96%E6%95%99%E5%AD%B8-%E9%87%8D%E9%BB%9E%E7%AF%84%E4%BE%8B-bpmn%E7%AC%A6%E8%99%9F%E4%BB%8B%E7%B4%B9-96499e91e5d4</p><p>https://medium.com/doflowy/sop%E8%A3%BD%E4%BD%9C%E6%95%99%E5%AD%B8-%E6%B5%81%E7%A8%8B%E5%9C%96%E7%AC%A6%E8%99%9F%E6%95%B4%E7%90%86-bpmn2-0%E9%80%B2%E9%9A%8E%E7%AC%A6%E8%99%9F%E6%95%99%E5%AD%B8-aea950aab991</p>',41),n=[i];function r(p,o){return a(),t("div",null,n)}const m=e(l,[["render",r],["__file","BPMN.html.vue"]]);export{m as default};
