const n=JSON.parse(`{"key":"v-b0f5b3fa","path":"/Tech/Backend/nodeJS/%E5%9F%BA%E7%A1%80/00%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html","title":"","lang":"en-US","frontmatter":{"description":"node js 全局对象 console request response __dirname 回调函数 模块 事件 node js是事件驱动的编程语言，下面写一个自定义事件的例子： \\tvar events = require('events'); \\tvar util = require('util') \\tvar Person = function(name){ //构造函数 \\t\\tthis.name = name \\t} \\tutil.inherits(Person, events.EventEmitter) //让person类继承eventemitter类的方法和属性，能够实现事件的订阅(on)和发布(emit) \\tvar jacob = new Person('jacob') //person类的实例 \\t \\t//定义person类的自定义事件，并且定义监听函数，用on注册此回调函数 \\tperson.on('speak', (message)=&gt;{ \\t\\tconsole.log(message) \\t}) //自定义speak事件 \\t//用代码手动触发自定义事件，并且传参给回调函数 \\tperson.emit('speak', 'this is jacob speaking...')","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Backend/nodeJS/%E5%9F%BA%E7%A1%80/00%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"node js 全局对象 console request response __dirname 回调函数 模块 事件 node js是事件驱动的编程语言，下面写一个自定义事件的例子： \\tvar events = require('events'); \\tvar util = require('util') \\tvar Person = function(name){ //构造函数 \\t\\tthis.name = name \\t} \\tutil.inherits(Person, events.EventEmitter) //让person类继承eventemitter类的方法和属性，能够实现事件的订阅(on)和发布(emit) \\tvar jacob = new Person('jacob') //person类的实例 \\t \\t//定义person类的自定义事件，并且定义监听函数，用on注册此回调函数 \\tperson.on('speak', (message)=&gt;{ \\t\\tconsole.log(message) \\t}) //自定义speak事件 \\t//用代码手动触发自定义事件，并且传参给回调函数 \\tperson.emit('speak', 'this is jacob speaking...')"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"node js 全局对象","slug":"node-js-全局对象","link":"#node-js-全局对象","children":[]},{"level":3,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":3,"title":"模块","slug":"模块","link":"#模块","children":[]},{"level":3,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":3,"title":"读写文件","slug":"读写文件","link":"#读写文件","children":[]},{"level":3,"title":"操作文件夹","slug":"操作文件夹","link":"#操作文件夹","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"Tech/Backend/nodeJS/基础/00 基础概念.md","excerpt":"<h3> node js 全局对象</h3>\\n<p><code>console</code>\\n<code>request</code>\\n<code>response</code>\\n<code>__dirname</code></p>\\n<h3> 回调函数</h3>\\n<h3> 模块</h3>\\n<h3> 事件</h3>\\n<p>node js是事件驱动的编程语言，下面写一个自定义事件的例子：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>\\t<span class=\\"token keyword\\">var</span> events <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'events'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">var</span> util <span class=\\"token operator\\">=</span> <span class=\\"token function\\">require</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'util'</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">var</span> <span class=\\"token function-variable function\\">Person</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  <span class=\\"token comment\\">//构造函数</span>\\n\\t\\t<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\tutil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">inherits</span><span class=\\"token punctuation\\">(</span>Person<span class=\\"token punctuation\\">,</span> events<span class=\\"token punctuation\\">.</span>EventEmitter<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//让person类继承eventemitter类的方法和属性，能够实现事件的订阅(on)和发布(emit)</span>\\n\\t<span class=\\"token keyword\\">var</span> jacob <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'jacob'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//person类的实例</span>\\n\\t\\n\\t<span class=\\"token comment\\">//定义person类的自定义事件，并且定义监听函数，用on注册此回调函数</span>\\n\\tperson<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'speak'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">message</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n\\t\\tconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>message<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">//自定义speak事件</span>\\n\\n\\t<span class=\\"token comment\\">//用代码手动触发自定义事件，并且传参给回调函数</span>\\n\\tperson<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">emit</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'speak'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'this is jacob speaking...'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
