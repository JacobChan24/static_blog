import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as r}from"./app-9e438faa.js";const n={},l=r(`<p><code>transform</code>属性CSS的颠覆性新特性，可以实现元素的位移、旋转、缩放等效果，其优势总结如下：</p><ul><li>总体而言所有的转换类似于相对定位，不会影响其他元素的布局，我们专注在单个元素的变化上即可</li><li>位移：更方便地实现居中，百分比值根据元素本身宽度计算</li><li>旋转：可以改变角度和旋转点</li><li>缩放：等比例缩放，选择缩放中心位置 配合transition属性使用，可以完成很多动效</li></ul><h3 id="_1-移动-translate" tabindex="-1"><a class="header-anchor" href="#_1-移动-translate" aria-hidden="true">#</a> 1.移动 - translate</h3><p>二维坐标系如下： ![[Pasted image 20230129053917.png]]</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>transform: translate(x,y);
transform: translateX(n);
transform: translateY(n);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重点" tabindex="-1"><a class="header-anchor" href="#重点" aria-hidden="true">#</a> 重点</h4><ol><li>定义 2D 转换中的移动，沿着 X 和 Y 轴移动元素，原点就是元素本身位置的左上角</li><li>最大优点：不会影响到其他元素的位置，但是好像会遮盖</li><li>translate中的百分比值是指相对于元素自身大小的百分比,[[元素水平居中的方式]]</li><li>此属性对行内标签没有任何效果</li></ol><p>使用位移使元素水平或者垂直居中 左边/右边margin设置为父元素宽度的50%，再向左边/右边移动元素自身大小50%的距离，这样不用量，很方便，且元素的大小改变时仍然适用:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>margin-left: 50%;
transform: translateX(-50%)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-旋转-rotate" tabindex="-1"><a class="header-anchor" href="#_2-旋转-rotate" aria-hidden="true">#</a> 2.旋转 - rotate</h3><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>transform: rotate(45deg) /*默认顺时针转*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="重点-1" tabindex="-1"><a class="header-anchor" href="#重点-1" aria-hidden="true">#</a> 重点</h4><ul><li>单位是<code>deg</code>，就是度数的意思</li><li>角度为正时代表顺时针，反之代表逆时针</li><li>默认旋转中心是元素的中心点</li></ul><h4 id="改变旋转中心点位置" tabindex="-1"><a class="header-anchor" href="#改变旋转中心点位置" aria-hidden="true">#</a> 改变旋转中心点位置</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>transform-origin: x y; /*注意是用空格隔开*/
默认为中心点
transform-origin: 50% 50% 百分比为相对于元素的位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>x/y的值还可以为像素单位或者方位名词(top bottom left right center)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>transform-origin: top right
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面将旋转点设置在了元素右上角</p><h4 id="案例-下拉框三角形" tabindex="-1"><a class="header-anchor" href="#案例-下拉框三角形" aria-hidden="true">#</a> 案例 - 下拉框三角形</h4><p>![[Pasted image 20230129060908.png]] hover上去的时候三角形改为朝上 [[下拉框三角形]]</p><h3 id="_3-缩放-scale" tabindex="-1"><a class="header-anchor" href="#_3-缩放-scale" aria-hidden="true">#</a> 3.缩放-scale</h3><h4 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h4><p><code>transform: scale(x,y);</code></p><ul><li>注意其中的x和y用逗号分隔</li><li>transform:scale(1,1) ：宽和高都放大一倍，相对于没有放大</li><li>transform:scale(2,2) ：宽和高都放大了2倍</li><li>transform:scale(2) ：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)</li><li>transform:scale(0.5,0.5)：缩小</li><li>sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li></ul><p>![[Pasted image 20230129063854.png]]</p><h4 id="_2d转换综合写法" tabindex="-1"><a class="header-anchor" href="#_2d转换综合写法" aria-hidden="true">#</a> 2D转换综合写法</h4><ol><li><p>同时使用多个转换，其格式为：transform: translate() rotate() scale() ...等，</p></li><li><p>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</p></li><li><p>当我们同时有位移和其他属性的时候，记得要将位移放到最前</p></li></ol>`,29),d=[l];function t(s,c){return a(),i("div",null,d)}const u=e(n,[["render",t],["__file","2D转换.html.vue"]]);export{u as default};
