import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as i,f as a}from"./app-9e438faa.js";const r={},s=a('<p>在flex布局里面，可以用width和height属性设置弹性子元素的大小，但是有更加方便的属性flex来控制 flex是三个属性的short-hand属性flex-grow、flex-shrink、flex-basis flex:2 ==== flex: 2(grow) 1(shrink) 0%(basis)</p><h3 id="flex-basis" tabindex="-1"><a class="header-anchor" href="#flex-basis" aria-hidden="true">#</a> flex-basis</h3><ul><li>初始值是 auto，此时浏览器根据元素的是否在设置了width属性，如果有则使用width属性的值作为flex-basis的值，如果没有则使用元素内容自身的大小；</li><li>如果不是auto，我们可以自己设计大小:px、em、百分比等等；</li><li>flex属性里如没有指定，则为0；</li><li>当弹性子元素的初始主尺寸确定了之后，因为可能不足占满或者溢出容器空间，所以我们就需要通过flex-grow和flex-shrink来决定缩放的规则</li></ul><h3 id="flex-shrink" tabindex="-1"><a class="header-anchor" href="#flex-shrink" aria-hidden="true">#</a> flex-shrink</h3><p>默认值1</p><h3 id="flex-grow" tabindex="-1"><a class="header-anchor" href="#flex-grow" aria-hidden="true">#</a> flex-grow</h3><ul><li>所有元素的宽度相加（所有的外边距也相加）之后，若不足填满整个容器的宽度，此属性则负责分配所有的剩余空间</li><li>若为0，则不会分配剩余空间，即宽度为flex-basis设置的值</li><li>flex-grow的值越大，分配剩余空间的权重也越大</li></ul><h3 id="简写属性flex" tabindex="-1"><a class="header-anchor" href="#简写属性flex" aria-hidden="true">#</a> 简写属性flex</h3><ul><li>推荐写简写属性</li><li><code>flex: flex-grow flex-shrink flex-basis</code></li><li>若在shorthand属性里面没有声明某属性，该属性不会自动设置为初始值，而是会自动设置为有用的默认值，即 <ul><li>flex-grow: 1;</li><li>flex-shrink: 1;</li><li>flex-basis: 0%;</li></ul></li><li>所以当我将两个元素设置为<code>flex: 1</code>和<code>flex:2</code>的时候，两个元素的基础大小为0，其大小完全根据剩余空间（即容器100%的空间）来分配大小</li></ul>',9),f=[s];function h(x,o){return l(),i("div",null,f)}const n=e(r,[["render",h],["__file","弹性子元素的大小-flex属性.html.vue"]]);export{n as default};
