const t=JSON.parse('{"key":"v-c9342050","path":"/Tech/Front-end/03_VUE/Props%E9%80%89%E9%A1%B9.html","title":"","lang":"en-US","frontmatter":{"description":"1.声明 props选项声明： 字符串数组声明 props: [\\"props1\\",\\"props2\\"] 对象声明 props : {\\"props1\\":Number, \\"props2\\": String} 推荐写为kebab-case的形式 2.静态&amp;动态Props 到现在为止，我们在父组件中使用的是静态的参数传给props（子组件内部属性） &lt;Blogpost customized-property=\\"This is my title\\"/&gt; 但除此之外，我们还可以使用v-bind绑定父组件上的动态数据，来动态地向子组件内部单向传递数据： &lt;Blogpost v-bind:customized-property=\\"post.title\\"/&gt;","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/03_VUE/Props%E9%80%89%E9%A1%B9.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"1.声明 props选项声明： 字符串数组声明 props: [\\"props1\\",\\"props2\\"] 对象声明 props : {\\"props1\\":Number, \\"props2\\": String} 推荐写为kebab-case的形式 2.静态&amp;动态Props 到现在为止，我们在父组件中使用的是静态的参数传给props（子组件内部属性） &lt;Blogpost customized-property=\\"This is my title\\"/&gt; 但除此之外，我们还可以使用v-bind绑定父组件上的动态数据，来动态地向子组件内部单向传递数据： &lt;Blogpost v-bind:customized-property=\\"post.title\\"/&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.31,"words":693},"filePathRelative":"Tech/Front-end/03_VUE/Props选项.md","excerpt":"<h5> 1.声明</h5>\\n<p>props选项声明：</p>\\n<ul>\\n<li>字符串数组声明 <code>props: [\\"props1\\",\\"props2\\"]</code></li>\\n<li>对象声明 <code>props : {\\"props1\\":Number, \\"props2\\": String}</code>\\n推荐写为kebab-case的形式</li>\\n</ul>\\n<h5> 2.静态&amp;动态Props</h5>\\n<p>到现在为止，我们在父组件中使用的是静态的参数传给props（子组件内部属性）\\n<code>&lt;Blogpost customized-property=\\"This is my title\\"/&gt;</code>\\n但除此之外，我们还可以使用<code>v-bind</code>绑定父组件上的动态数据，来动态地向子组件内部单向传递数据：\\n<code>&lt;Blogpost v-bind:customized-property=\\"post.title\\"/&gt;</code></p>","autoDesc":true}');export{t as data};
