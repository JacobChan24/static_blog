const e=JSON.parse('{"key":"v-1f549a24","path":"/Tech/Front-end/Others/%E5%89%8D%E7%AB%AF%E9%89%B4%E6%9D%83.html","title":"","lang":"en-US","frontmatter":{"description":"什么是鉴权 鉴权也叫身份认证，指验证用户是否有系统的访问权限。就很像我们经常乘坐动车的票据（对应的标识，一定的时间范围）。 认证方式 接下来介绍几种我们工作中通常用到的认证方式。 Session-Cookie 认证 利用服务端的 Session（会话）和浏览器（客户端）的 Cookie 来实现的前后端通信认证模式。 来源 由于 HTTP 请求时是无状态的，服务端正常情况下无法得知请求发送者的身份。这个时候如果我们要记录状态，就需要在服务端创建会话，将相同客户端的请求都维护在各自的会话记录中，每当请求到达服务端时，先校验请求中的用户标识是否存在于 Session 中，如果有则表示已经认证成功，否则表示认证失败。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/Others/%E5%89%8D%E7%AB%AF%E9%89%B4%E6%9D%83.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"什么是鉴权 鉴权也叫身份认证，指验证用户是否有系统的访问权限。就很像我们经常乘坐动车的票据（对应的标识，一定的时间范围）。 认证方式 接下来介绍几种我们工作中通常用到的认证方式。 Session-Cookie 认证 利用服务端的 Session（会话）和浏览器（客户端）的 Cookie 来实现的前后端通信认证模式。 来源 由于 HTTP 请求时是无状态的，服务端正常情况下无法得知请求发送者的身份。这个时候如果我们要记录状态，就需要在服务端创建会话，将相同客户端的请求都维护在各自的会话记录中，每当请求到达服务端时，先校验请求中的用户标识是否存在于 Session 中，如果有则表示已经认证成功，否则表示认证失败。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是鉴权","slug":"什么是鉴权","link":"#什么是鉴权","children":[]},{"level":2,"title":"认证方式","slug":"认证方式","link":"#认证方式","children":[{"level":3,"title":"Session-Cookie 认证","slug":"session-cookie-认证","link":"#session-cookie-认证","children":[]},{"level":3,"title":"关于 Cookie 的安全问题","slug":"关于-cookie-的安全问题","link":"#关于-cookie-的安全问题","children":[]},{"level":3,"title":"Token 认证","slug":"token-认证","link":"#token-认证","children":[]},{"level":3,"title":"单点登录","slug":"单点登录","link":"#单点登录","children":[]},{"level":3,"title":"关于 OIDC","slug":"关于-oidc","link":"#关于-oidc","children":[]},{"level":3,"title":"关于 OAuth2","slug":"关于-oauth2","link":"#关于-oauth2","children":[]},{"level":3,"title":"关于 LDAP","slug":"关于-ldap","link":"#关于-ldap","children":[]},{"level":3,"title":"Others 认证方式","slug":"others-认证方式","link":"#others-认证方式","children":[]}]},{"level":2,"title":"Google 验证器","slug":"google-验证器","link":"#google-验证器","children":[{"level":3,"title":"密钥二维码","slug":"密钥二维码","link":"#密钥二维码","children":[]},{"level":3,"title":"使用 base32 的解码密钥","slug":"使用-base32-的解码密钥","link":"#使用-base32-的解码密钥","children":[]},{"level":3,"title":"获取 Unix 时间戳","slug":"获取-unix-时间戳","link":"#获取-unix-时间戳","children":[]},{"level":3,"title":"计算签名","slug":"计算签名","link":"#计算签名","children":[]},{"level":3,"title":"得出结果","slug":"得出结果","link":"#得出结果","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.59,"words":1976},"filePathRelative":"Tech/Front-end/Others/前端鉴权.md","excerpt":"<h2> 什么是鉴权</h2>\\n<p>鉴权也叫身份认证，指验证用户是否有系统的访问权限。就很像我们经常乘坐动车的票据（对应的标识，一定的时间范围）。</p>\\n<h2> 认证方式</h2>\\n<p>接下来介绍几种我们工作中通常用到的认证方式。</p>\\n<h3> Session-Cookie 认证</h3>\\n<p>利用服务端的 Session（会话）和浏览器（客户端）的 Cookie 来实现的前后端通信认证模式。</p>\\n<h4> 来源</h4>\\n<p>由于 HTTP 请求时是无状态的，服务端正常情况下无法得知请求发送者的身份。这个时候如果我们要记录状态，就需要在服务端创建会话，将相同客户端的请求都维护在各自的会话记录中，每当请求到达服务端时，先校验请求中的用户标识是否存在于 Session 中，如果有则表示已经认证成功，否则表示认证失败。</p>","autoDesc":true}');export{e as data};
