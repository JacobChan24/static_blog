const t=JSON.parse('{"key":"v-a7e11cc6","path":"/Tech/Front-end/01_CSS/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.html","title":"","lang":"en-US","frontmatter":{"description":"概述 与绝对定位类似，但是绝对定位的元素的包含快(containing block)不是视口，而是相对最近的非静态定位(static)的父级元素，同时脱离文档流，其出现与隐藏不会影响其他元素的位置 包含块是元素的父元素。如果父元素未被定位，那么浏览器会沿着DOM 树往上找它的祖父、曾祖父，直到找到一个定位元素，用它作为包含块。如果父元素都没有都没有定位，则那么绝对定位的元素会基于初始包含快(initial containing block)来定位，初始包含块跟视口一样大，固定在网页的顶部 top,right,bottom和left决定了元素的边缘在包含块里面的位置","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/01_CSS/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"概述 与绝对定位类似，但是绝对定位的元素的包含快(containing block)不是视口，而是相对最近的非静态定位(static)的父级元素，同时脱离文档流，其出现与隐藏不会影响其他元素的位置 包含块是元素的父元素。如果父元素未被定位，那么浏览器会沿着DOM 树往上找它的祖父、曾祖父，直到找到一个定位元素，用它作为包含块。如果父元素都没有都没有定位，则那么绝对定位的元素会基于初始包含快(initial containing block)来定位，初始包含块跟视口一样大，固定在网页的顶部 top,right,bottom和left决定了元素的边缘在包含块里面的位置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"Tech/Front-end/01_CSS/绝对定位.md","excerpt":"<h4> 概述</h4>\\n<ul>\\n<li>与绝对定位类似，但是绝对定位的元素的包含快(containing block)不是视口，而是相对最近的非静态定位(static)的父级元素，同时脱离文档流，其出现与隐藏不会影响其他元素的位置</li>\\n<li>包含块是元素的父元素。如果父元素未被定位，那么浏览器会沿着DOM 树往上找它的祖父、曾祖父，直到找到一个定位元素，用它作为包含块。如果父元素都没有都没有定位，则那么绝对定位的元素会基于初始包含快(initial containing block)来定位，初始包含块跟视口一样大，固定在网页的顶部</li>\\n<li>top,right,bottom和left决定了元素的边缘在包含块里面的位置</li>\\n</ul>","autoDesc":true}');export{t as data};
