const n=JSON.parse(`{"key":"v-0bd5dfc6","path":"/Tech/Front-end/02_Javascript/Basics/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A7%A3%E6%9E%84%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"","lang":"en-US","frontmatter":{"description":"这里介绍一些比较不基础的[[运算符]]，更加基础的可以见前面的笔记 1. 扩展运算符 spread operator ...将一个可迭代的对象（数组，字符串、对象等）展开成多个元素，可以用于数据的拼接 2. 解构运算符 解构运算符是一种快速并且简便地从数组和对象中获取值的方法。在JavaScript中，解构运算符使用花括号 {} 或方括号 [] 来解构对象和数组中的值。下面是一些示例： 1. 解构对象 // 定义一个对象 const user = { name: 'Alice', age: 28, city: 'New York', country: 'USA' }; // 使用解构运算符获取对象中的值 const { name, age } = user; // 打印结果 console.log(name); // Alice console.log(age); // 28","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/02_Javascript/Basics/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A7%A3%E6%9E%84%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"这里介绍一些比较不基础的[[运算符]]，更加基础的可以见前面的笔记 1. 扩展运算符 spread operator ...将一个可迭代的对象（数组，字符串、对象等）展开成多个元素，可以用于数据的拼接 2. 解构运算符 解构运算符是一种快速并且简便地从数组和对象中获取值的方法。在JavaScript中，解构运算符使用花括号 {} 或方括号 [] 来解构对象和数组中的值。下面是一些示例： 1. 解构对象 // 定义一个对象 const user = { name: 'Alice', age: 28, city: 'New York', country: 'USA' }; // 使用解构运算符获取对象中的值 const { name, age } = user; // 打印结果 console.log(name); // Alice console.log(age); // 28"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 扩展运算符 spread operator","slug":"_1-扩展运算符-spread-operator","link":"#_1-扩展运算符-spread-operator","children":[]},{"level":2,"title":"2. 解构运算符","slug":"_2-解构运算符","link":"#_2-解构运算符","children":[]},{"level":2,"title":"3. 三元运算符","slug":"_3-三元运算符","link":"#_3-三元运算符","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.13,"words":338},"filePathRelative":"Tech/Front-end/02_Javascript/Basics/扩展运算符、解构运算符、三元运算符.md","excerpt":"<p>这里介绍一些比较不基础的[[运算符]]，更加基础的可以见前面的笔记</p>\\n<h2> 1. 扩展运算符 spread operator</h2>\\n<p><code>...</code>将一个可迭代的对象（数组，字符串、对象等）展开成多个元素，可以用于数据的拼接</p>\\n<h2> 2. 解构运算符</h2>\\n<p>解构运算符是一种快速并且简便地从数组和对象中获取值的方法。在JavaScript中，解构运算符使用花括号 <code>{}</code> 或方括号 <code>[]</code> 来解构对象和数组中的值。下面是一些示例：\\n1. 解构对象</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 定义一个对象</span>\\n<span class=\\"token keyword\\">const</span> user <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Alice'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">28</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">city</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'New York'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token literal-property property\\">country</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'USA'</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 使用解构运算符获取对象中的值</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> name<span class=\\"token punctuation\\">,</span> age <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> user<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 打印结果</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Alice</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>age<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 28</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
