import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-9e438faa.js";const e={},p=t(`<h3 id="node-js-全局对象" tabindex="-1"><a class="header-anchor" href="#node-js-全局对象" aria-hidden="true">#</a> node js 全局对象</h3><p><code>console</code><code>request</code><code>response</code><code>__dirname</code></p><h3 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数" aria-hidden="true">#</a> 回调函数</h3><h3 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h3><p>node js是事件驱动的编程语言，下面写一个自定义事件的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token keyword">var</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//构造函数</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
	<span class="token punctuation">}</span>
	util<span class="token punctuation">.</span><span class="token function">inherits</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> events<span class="token punctuation">.</span>EventEmitter<span class="token punctuation">)</span> <span class="token comment">//让person类继承eventemitter类的方法和属性，能够实现事件的订阅(on)和发布(emit)</span>
	<span class="token keyword">var</span> jacob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;jacob&#39;</span><span class="token punctuation">)</span> <span class="token comment">//person类的实例</span>
	
	<span class="token comment">//定义person类的自定义事件，并且定义监听函数，用on注册此回调函数</span>
	person<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;speak&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//自定义speak事件</span>

	<span class="token comment">//用代码手动触发自定义事件，并且传参给回调函数</span>
	person<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;speak&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;this is jacob speaking...&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件" aria-hidden="true">#</a> 读写文件</h3><h5 id="同步api" tabindex="-1"><a class="header-anchor" href="#同步api" aria-hidden="true">#</a> 同步api</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//读文件</span>
fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> text <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;readme.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//写文件</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;writeme.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&quot;这里是要写入的内容&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步的意思的就是程序运行到这里的时候会阻塞住，直到这个I/O操作完成之后才会继续运行接下来的代码</p><h5 id="异步api" tabindex="-1"><a class="header-anchor" href="#异步api" aria-hidden="true">#</a> 异步api</h5><p>异步的文件api执行的时候，程序不会阻塞，而是会运行后面的代码，知道读写操作完成之后，程序才会执行回调函数，所以这些异步的api里面一定要传回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;readme.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;newwriteme.txt&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;文件读取写入功能完成！&quot;</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作文件夹" tabindex="-1"><a class="header-anchor" href="#操作文件夹" aria-hidden="true">#</a> 操作文件夹</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//删除文件</span>
fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;文件名&#39;</span><span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span> <span class="token comment">//异步</span>
fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span><span class="token string">&#39;文件名&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//创建删除目录</span>
fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;stuff&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;stuff&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","00 基础概念.html.vue"]]);export{d as default};
