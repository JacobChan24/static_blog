const e=JSON.parse('{"key":"v-286d8643","path":"/Tech/Front-end/02_Javascript/Basics/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{"description":"字面量 var obj = {} New 关键字 var obj = new Object({}) 构造函数 与new关键字一起使用 为什么需要用构造函数来创建对象呢？ 因为之前的两种方式一次只能创建一个对象，用构造函数的方式可以克服这个缺点，可以用构造函数批量创建有相同的方法和属性的对象 构造函数里面不需要return就可以返回一个对象 属性和方法前面必需加this 实例：","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/02_Javascript/Basics/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"字面量 var obj = {} New 关键字 var obj = new Object({}) 构造函数 与new关键字一起使用 为什么需要用构造函数来创建对象呢？ 因为之前的两种方式一次只能创建一个对象，用构造函数的方式可以克服这个缺点，可以用构造函数批量创建有相同的方法和属性的对象 构造函数里面不需要return就可以返回一个对象 属性和方法前面必需加this 实例："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.62,"words":187},"filePathRelative":"Tech/Front-end/02_Javascript/Basics/创建对象的三种方式.md","excerpt":"<ol>\\n<li>字面量\\n<code>var obj = {}</code></li>\\n<li>New 关键字\\n<code>var obj = new Object({})</code></li>\\n<li>构造函数 与new关键字一起使用\\n为什么需要用构造函数来创建对象呢？</li>\\n</ol>\\n<p>因为之前的两种方式一次只能创建一个对象，用构造函数的方式可以克服这个缺点，可以用构造函数批量创建有相同的方法和属性的对象</p>\\n<p>构造函数里面不需要<code>return</code>就可以返回一个对象</p>\\n<p>属性和方法前面必需加<code>this</code></p>\\n<p>实例：</p>","autoDesc":true}');export{e as data};
