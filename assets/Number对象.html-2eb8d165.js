import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as a,f as n}from"./app-9e438faa.js";const t={},d=n(`<h5 id="创建number对象的方法" tabindex="-1"><a class="header-anchor" href="#创建number对象的方法" aria-hidden="true">#</a> 创建number对象的方法</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var myNum1 = new Number(value)
var myNum2 = Number(value)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以加不加new有什么区别呢？区别在于：加了new的话JS会创建一个对象，如果不加new的话，JS只是将Number()当作一个函数，尝试将里面的值转换为数字并return这个值，转换失败则返回NaN。输出myNum1的时候是一个object，输出myNum2的时候是一个数值，数字对象的属性和方法对number类型的变量是不可用的（这一点和字符串和字符串对象不一样）</p><h5 id="number对象的属性" tabindex="-1"><a class="header-anchor" href="#number对象的属性" aria-hidden="true">#</a> number对象的属性</h5><h5 id="number对象的方法" tabindex="-1"><a class="header-anchor" href="#number对象的方法" aria-hidden="true">#</a> number对象的方法</h5><p>![[Pasted image 20220614110531.png]] 注意：对象使用方法（对象里面的函数叫做方法）之后不会改变原对象，只会返回一个值</p>`,6),m=[d];function u(i,s){return r(),a("div",null,m)}const o=e(t,[["render",u],["__file","Number对象.html.vue"]]);export{o as default};
