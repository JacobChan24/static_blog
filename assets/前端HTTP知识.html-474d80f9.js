import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c,f as d}from"./app-9e438faa.js";const i={},p=d('<h2 id="http-起源" tabindex="-1"><a class="header-anchor" href="#http-起源" aria-hidden="true">#</a> HTTP 起源</h2><p>大家好，我是鱼皮。最近有同学私信: 学前端需要掌握 HTTP 什么方面的知识，今天就给大家分享一篇介绍前端必备的 HTTP 知识的文章，希望能帮助到大家。</p><p><code>HTTP</code>是由蒂姆·伯纳斯-李（<code>TimBerners—Lee</code>）于1989年在欧洲核子研究组织（<code>CERN</code>）所发起</p><p>其中最著名的是 1999 年 6 月公布的RFC 2616[1]，定义了<code>HTTP</code>协议中现今广泛使用的一个版本——<code>HTTP 1.1</code></p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNoKHfCsRugWcCZBmt9sgWngfWJG6v5TQFJGNQ1RDNdacfbUM8cfyTKA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="http-是什么" tabindex="-1"><a class="header-anchor" href="#http-是什么" aria-hidden="true">#</a> HTTP 是什么</h2><p>全称：超文本传输协议（<code>HyperText Transfer Protocol</code>）</p><p>概念：<code>HTTP</code>是一种能够获取像<code>HTML</code>、图片等网络资源的通讯协议（<code>protocol</code>）。它是在<code>web</code>上进行数据交换的基础，是一种<code>client-server</code>协议</p><p><code>HTTP</code>——因特网的多媒体信使 ——《HTTP权威指南》。<code>HTTP</code>在因特网的角色：充当一个信使的角色，干的就是一个跑腿的活，在客户端和服务端之间传递信息，但我们又不能缺少它。<code>HTTP</code>协议是应用层的协议，是与前端开发最息息相关的协议。平时我们遇到的<code>HTTP</code>请求、<code>HTTP</code>缓存、<code>Cookies</code>、跨域等其实都跟<code>HTTP</code>息息相关</p><h2 id="http-的基础特性" tabindex="-1"><a class="header-anchor" href="#http-的基础特性" aria-hidden="true">#</a> HTTP 的基础特性</h2><ul><li><p>可拓展协议。<code>HTTP 1.0</code>出现的[[HTTP headers]]让协议拓展变得更加的容易。只要服务端和客户端就<code>headers</code>达成语义一致，新功能就可以被轻松的加入进来</p></li><li><p><code>HTTP</code>是无状态的、有会话的。在同一个连接中，两个执行成功的<code>HTTP</code>请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互，比如在一个电商网站里，用户把某个商品加入到购物车，切换一个页面后再次添加了商品，这两次添加商品的请求之间没有关联，浏览器无法知道用户最终选择了哪些商品。而使用<code>HTTP</code>的头部扩展，<code>HTTP Cookies</code>就可以解决这个问题。把<code>Cookies</code>添加到头部中，创建一个会话让每次请求都能共享相同的上下文信息，达成相同的状态。</p></li><li><p><code>HTTP</code>与连接。通过<code>TCP</code>，或者<code>TLS</code>——加密的<code>TCP</code>连接来发送，理论上任何可靠的传输协议都可以使用。连接是传输层控制的，这从根本上来讲不是<code>HTTP</code>的范畴。</p></li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvN3ibffK8frUExPhos5xWZDOyx9QZ9XxUdTibf95uoEF8X9Moa1NeUBmicw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>也就是说，<code>HTTP</code>依赖于面向连接的<code>TCP</code>进行消息传递，但连接并不是必须的。只需要它是可靠的，或不丢失消息的（至少返回错误）。</p><p><code>HTTP/1.0</code>默认为每一对<code>HTTP</code>请求/响应都打开一个单独的<code>TCP</code>连接。当需要连续发起多个请求时，这种模式比多个请求共享同一个<code>TCP</code>链接更低效。为此，<code>HTTP 1.1</code>持久连接的概念，底层<code>TCP</code>连接可以通过<code>connection</code>头部实现。但<code>HTTP 1.1</code>在连接上也是不完美的，后面我们会提到。</p><h2 id="基于-http-的组件系统" tabindex="-1"><a class="header-anchor" href="#基于-http-的组件系统" aria-hidden="true">#</a> 基于 HTTP 的组件系统</h2><p><code>HTTP</code>的组件系统包括客户端、<code>web</code>服务器和代理</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNXVlfJFhDX9IJHrcMPj9zhvNicO6Zk2tOWymqLHrAGEUKI5lvKz8WsNw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="客户端-user-agent" tabindex="-1"><a class="header-anchor" href="#客户端-user-agent" aria-hidden="true">#</a> 客户端：user-agent</h3><p>浏览器，特殊比如是工程师使用的程序，以及<code>Web</code>开发人员调试应用程序</p><h3 id="web服务端" tabindex="-1"><a class="header-anchor" href="#web服务端" aria-hidden="true">#</a> Web服务端</h3><p>由<code>Web Server</code>来服务并提供客户端所请求的文档。每一个发送到服务器的请求，都会被服务器处理并返回一个消息，也就是<code>response</code></p><h3 id="代理-proxies" tabindex="-1"><a class="header-anchor" href="#代理-proxies" aria-hidden="true">#</a> 代理（Proxies）</h3><p>在浏览器和服务器之间，有很多计算机和其他设备转发了<code>HTTP</code>消息。它们可能出现在传输层、网络层和物理层上，对于<code>HTTP</code>应用层而言就是透明的</p><p>有如下的一些作用</p><ul><li><p>缓存</p></li><li><p>过滤（像防病毒扫描、家长控制）</p></li><li><p>负载均衡</p></li><li><p>认证（对不同的资源进行权限控制）</p></li><li><p>日志管理</p></li></ul><h2 id="http-报文组成" tabindex="-1"><a class="header-anchor" href="#http-报文组成" aria-hidden="true">#</a> HTTP 报文组成</h2><p>HTTP 有两种类型的消息：</p><ul><li><p>请求——由客户端发送用来触发一个服务器上的动作</p></li><li><p>响应——来自服务器端的应答</p></li></ul><p><code>HTTP</code>消息由采用<code>ASCII</code>编码的多行文本构成的。在<code>HTTP/1.1</code>以及更早的版本中，这些消息通过连接公开的发送。在<code>HTTP2.0</code>中，消息被分到了多个<code>HTTP</code>帧中。通过配置文件（用于代理服务器或者服务器），<code>API</code>（用于浏览器）或者其他接口提供<code>HTTP</code>消息</p><h3 id="典型的-http-会话" tabindex="-1"><a class="header-anchor" href="#典型的-http-会话" aria-hidden="true">#</a> 典型的 HTTP 会话</h3><ul><li><p>建立连接          在客户端-服务器协议中，连接是由客户端发起建立的。在<code>HTTP</code>中打开连接意味着在底层传输层启动连接，通常是<code>TCP</code>。使用<code>TCP</code>时，<code>HTTP</code>服务器的默认端口号是<code>80</code>，另外还有<code>8000</code>和<code>8080</code>也很常用</p></li><li><p>发送客户端请求</p></li><li><p>服务器响应请求</p></li></ul><h3 id="http-请求和响应" tabindex="-1"><a class="header-anchor" href="#http-请求和响应" aria-hidden="true">#</a> HTTP 请求和响应</h3><p>HTTP 请求和响应都包括起始行（<code>start line</code>）、请求头（<code>HTTP Headers</code>）、空行（<code>empty line</code>）以及<code>body</code>部分，如下图所示：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNgVcSwlONtRwsv3RVibzg9BmF7jg2VdT39ibEp0ZRAsqsCTP5BU9rHSlA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>起始行。请求的起始行：请求方法、请求<code>Path</code>和<code>HTTP</code>版本号        响应的起始行：<code>HTTP</code>版本号、响应状态码以及状态文本描述</li></ul><p>下面详细说下请求<code>Path</code>，请求路径（<code>Path</code>）有以下几种：</p><p>1）一个绝对路径，末尾跟上一个 &#39; ? &#39; 和查询字符串。这是最常见的形式，称为 原始形式 (<code>origin form</code>)，被<code>GET</code>，<code>POST</code>，<code>HEAD</code>和<code>OPTIONS</code>方法所使用</p><p><code>POST / HTTP/1.1 GET /background.png HTTP/1.0 HEAD /test.html?query=alibaba HTTP/1.1 OPTIONS /anypage.html HTTP/1.0</code></p><p>2）一个完整的<code>URL</code>。主要在使用<code>GET</code>方法连接到代理的时候使用</p><p><code>GET http://developer.mozilla.org/en-US/docs/Web/HTTP/Messages HTTP/1.1</code></p><p>3）由域名和可选端口（以&#39;:&#39;为前缀）组成的<code>URL</code>的<code>authority component</code>，称为<code>authority form</code>。仅在使用<code>CONNECT</code>建立<code>HTTP</code>隧道时才使用</p><p><code>CONNECT developer.mozilla.org:80 HTTP/1.1</code></p><p>4）星号形式 (<code>asterisk form</code>)，一个简单的星号(&#39;*&#39;)，配合<code>OPTIONS</code>方法使用，代表整个服务器。</p><p><code>OPTIONS * HTTP/1.1</code></p><ul><li><p><code>Headers</code>请求头或者响应头。详见下面的首部。不区分大小写的字符串，紧跟着的冒号 (&#39;😂 和一个结构取决于<code>header</code>的值</p></li><li><p>空行。很多人容易忽略</p></li><li><p><code>Body</code></p></li></ul><p>请求<code>Body</code>部分：有些请求将数据发送到服务器以便更新数据：常见的的情况是<code>POST</code>请求（包含<code>HTML</code>表单数据）。请求报文的<code>Body</code>一般为两类。一类是通过<code>Content-Type</code>和<code>Content-Length</code>定义的单文件<code>body</code>。另外一类是由多<code>Body</code>组成，通常是和<code>HTML Form</code>联系在一起的。两者的不同表现在于<code>Content-Type</code>的值。</p><p>1）<code>Content-Type —— application/x-www-form-urlencoded</code>对于<code>application/x-www-form-urlencoded</code>格式的表单内容，有以下特点:</p><p>I.其中的数据会被编码成以&amp;分隔的键值对</p><p>II.字符以URL编码方式编码。</p><p><code>// 转换过程: {a: 1, b: 2} -&gt; a=1&amp;b=2 -&gt; 如下(最终形式) &quot;a%3D1%26b%3D2&quot; </code></p><p>2)<code>Content-Type —— multipart/form-data</code></p><p>请求头中的<code>Content-Type</code>字段会包含<code>boundary</code>，且<code>boundary</code>的值有浏览器默认指定。例:<code>Content-Type: multipart/form-data;boundary=----WebkitFormBoundaryRRJKeWfHPGrS4LKe</code>。</p><p>数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有<code>HTTP</code>头部描述子包体，如<code>Content-Type</code>，在最后的分隔符会加上--表示结束。</p><p><code>Content-Disposition: form-data;name=&quot;data1&quot;; Content-Type: text/plain data1 ----WebkitFormBoundaryRRJKeWfHPGrS4LKe Content-Disposition: form-data;name=&quot;data2&quot;; Content-Type: text/plain data2 ----WebkitFormBoundaryRRJKeWfHPGrS4LKe--</code></p><p>响应<code>Body</code>部分：</p><p>1）由已知长度的单个文件组成。该类型<code>body</code>由两个<code>header</code>定义：<code>Content-Type</code>和<code>Content-Length</code></p><p>2）由未知长度的单个文件组成，通过将<code>Transfer-Encoding</code>设置为<code>chunked</code>来使用<code>chunks</code>编码。</p><p>关于<code>Content-Length</code>在下面<code>HTTP 1.0</code>中会提到，这个是<code>HTTP 1.0</code>中新增的非常重要的头部。</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><p>安全方法：<code>HTTP</code>定义了一组被称为安全方法的方法。<code>GET</code>方法和<code>HEAD</code>方法都被认为是安全的，这意味着<code>GET</code>方法和<code>HEAD</code>方法都不会产生什么动作 ——<code>HTTP</code>请求不会再服务端产生什么结果，但这并不意味着什么动作都没发生，其实这更多的是<code>web</code>开发者决定的</p><ul><li><p><code>GET</code>：请求服务器发送某个资源</p></li><li><p><code>HEAD</code>：跟<code>GET</code>方法类似，但服务器在响应中只返回了首部。不会返回实体的主体部分。</p></li><li><p><code>PUT</code>：向服务器中写入文档。语义：用请求的主体部分来创建一个由所请求的<code>URL</code>命名的新文档</p></li><li><p><code>POST</code>：用来向服务器中输入数据的。通常我们提交表单数据给服务器。【<code>POST</code>用于向服务器发送数据，<code>PUT</code>方法用于向服务器上的资源（例如文件）中存储数据】</p></li><li><p><code>TRACE</code>：主要用于诊断。实现沿通向目标资源的路径的消息环回（<code>loop-back</code>）测试 ，提供了一种实用的<code>debug</code>机制。</p></li><li><p><code>OPTIONS</code>：请求<code>WEB</code>服务器告知其支持的各种功能。可以询问服务器支持哪些方法。或者针对某些特殊资源支持哪些方法。</p></li><li><p><code>DELETE</code>：请求服务器删除请求<code>URL</code>中指定的的资源</p></li></ul><h3 id="get-和-post-的区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-的区别" aria-hidden="true">#</a> GET 和 POST 的区别</h3><p>首先要了解下副作用和幂等的概念，副作用指的是对服务器端资源做修改。幂等指发送<code>M</code>和<code>N</code>次请求（两者不相同且都大于 1），服务器上资源的状态一致。应用场景上，get是无副作用的，幂等的。post 主要是有副作用的，不幂等的情况</p><p>技术上有以下的区分：</p><ul><li><p>缓存：<code>Get</code>请求能缓存，<code>Post</code>请求不能</p></li><li><p>安全：<code>Get</code>请求没有<code>Post</code>请求那么安全，因为请求都在<code>URL</code>中。且会被浏览器保存历史纪录。<code>POST</code>放在请求体中，更加安全</p></li><li><p>限制：<code>URL</code>有长度限制，会干预<code>Get</code>请求，这个是浏览器决定的</p></li><li><p>编码：<code>GET</code>请求只能进行<code>URL</code>编码，只能接收<code>ASCII</code>字符，而<code>POST</code>没有限制。<code>POST</code>支持更多的编码类型，而且不对数据类型做限制</p></li><li><p>从<code>TCP</code>的角度，<code>GET</code>请求会把请求报文一次性发出去，而<code>POST</code>会分为两个<code>TCP</code>数据包，首先发<code>header</code>部分，如果服务器响应<code>100(continue)</code>， 然后发<code>body</code>部分。(火狐浏览器除外，它的<code>POST</code>请求只发一个<code>TCP</code>包)</p></li></ul><h3 id="状态码" tabindex="-1"><a class="header-anchor" href="#状态码" aria-hidden="true">#</a> 状态码</h3><ul><li><p>100~199——信息性状态码</p><p>101 Switching Protocols。在HTTP升级为WebSocket的时候，如果服务器同意变更，就会发送状态码 101。</p></li><li><p>200~299——成功状态码</p><p>200 OK，表示从客户端发来的请求在服务器端被正确处理</p><p>204 No content，表示请求成功，但响应报文不含实体的主体部分</p><p>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</p><p>206 Partial Content，进行范围请求</p></li><li><p>300~399——重定向状态码</p><p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</p><p>302 found，临时性重定向，表示资源临时被分配了新的 URL</p><p>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</p><p>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</p><p>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p></li><li><p>400~499——客户端错误状态码</p><p>400 bad request，请求报文存在语法错误</p><p>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</p><p>403 forbidden，表示对请求资源的访问被服务器拒绝</p><p>404 not found，表示在服务器上没有找到请求的资源</p></li><li><p>500~599——服务器错误状态码</p><p>500 internal sever error，表示服务器端在执行请求时发生了错误</p><p>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</p><p>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p></li></ul><h3 id="首部" tabindex="-1"><a class="header-anchor" href="#首部" aria-hidden="true">#</a> 首部</h3><p><code>HTTP Headers</code></p><p>1.通用首部（<code>General headers</code>）同时适用于请求和响应消息，但与最终消息主体中传输的数据无关的消息头。如<code>Date</code></p><p>2.请求首部（<code>Request headers</code>）包含更多有关要获取的资源或客户端本身信息的消息头。如 User-Agent</p><p>3.响应首部（<code>Response headers</code>）包含有关响应的补充信息</p><p>4.实体首部（<code>Entity headers</code>）含有关实体主体的更多信息，比如主体长(<code>Content-Length</code>)度或其<code>MIME</code>类型。如<code>Accept-Ranges</code></p><p>详细的<code>Header</code>见HTTP Headers 集合[2]</p><h2 id="http-的前世今生" tabindex="-1"><a class="header-anchor" href="#http-的前世今生" aria-hidden="true">#</a> HTTP 的前世今生</h2><p><code>HTTP（HyperText Transfer Protocol）</code>是万维网（<code>World Wide Web</code>）的基础协议。<code>Tim Berners-Lee</code>博士和他的团队在<code>1989-1991</code>年间创造出它。【HTTP、网络浏览器、服务器】</p><p>在 1991 年发布了<code>HTTP 0.9</code>版，在 1996 年发布 1.0 版，1997 年是 1.1 版，1.1 版也是到今天为止传输最广泛的版本。2015 年发布了 2.0 版，其极大的优化了<code>HTTP/1.1</code>的性能和安全性，而 2018 年发布的 3.0 版，继续优化<code>HTTP/2</code>，激进地使用<code>UDP</code>取代<code>TCP</code>协议，目前，<code>HTTP/3</code>在 2019 年 9 月 26 日 被<code>Chrome</code>，<code>Firefox</code>，和<code>Cloudflare</code>支持</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNxKRINPCaFYRXHVXO7ibv21VJjwruiczoO8nQwxqptheQSkDhDUC9n7IQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="http-0-9" tabindex="-1"><a class="header-anchor" href="#http-0-9" aria-hidden="true">#</a> HTTP 0.9</h3><p>单行协议，请求由单行指令构成。以唯一可用的方法<code>GET</code>开头。后面跟的是目标资源的路径</p><p><code>GET /mypage.html </code></p><p>响应：只包括响应文档本身</p><p><code>&lt;HTML&gt; 这是一个非常简单的HTML页面 &lt;/HTML&gt; </code></p><ul><li><p>没有响应头，只传输<code>HTML</code>文件</p></li><li><p>没有状态码</p></li></ul><h3 id="http-1-0" tabindex="-1"><a class="header-anchor" href="#http-1-0" aria-hidden="true">#</a> HTTP 1.0</h3><p>RFC 1945[3]提出了<code>HTTP1.0</code>，<strong>构建更好可拓展性</strong></p><ul><li><p>协议版本信息会随着每个请求发送</p></li><li><p>响应状态码</p></li><li><p>引入了<code>HTTP</code>头的概念，无论是请求还是拓展，允许传输元数据。使协议变得灵活，更加具有拓展性</p></li><li><p><code>Content-Type</code>请求头，具备了传输除纯文本<code>HTML</code>文件以外其他类型文档的能力 。 在响应中，<code>Content-Type</code>标头告诉客户端实际返回的内容的内容类型</p></li></ul><p>媒体类型是一种标准。用来表示文档、文件或者字节流的性质和格式。浏览器通常使用<code>MIME</code>（<code>Multipurpose Internet Mail Extensions</code>）类型来确定如何处理<code>URL</code>，因此<code>Web</code>服务器在响应头中配置正确的<code>MIME</code>类型会非常的重要。如果配置不正确，可能会导致网站无法正常的工作。<code>MIME</code>的组成结构非常简单；由类型与子类型两个字符串中间用&#39;/&#39;分隔而组成。</p><p><code>HTTP</code>从<code>MIME type</code>取了一部分来标记报文<code>body</code>部分的数据类型，这些类型体现在<code>Content-Type</code>这个字段，当然这是针对于发送端而言，接收端想要收到特定类型的数据，也可以用<code>Accept</code>字段。</p><p>这两个字段的取值可以分为下面几类:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- text：text/html, text/plain, text/css 等- image: image/gif, image/jpeg, image/png 等- audio/video: audio/mpeg, video/mp4 等- application: application/json, application/javascript, application/pdf, application/octet-stream\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时为了约定请求的数据和响应数据的压缩方式、支持语言、字符集等，还提出了以下的<code>Header</code></p><p>1.压缩方式:发送端：<code>Content-Encoding</code>（服务端告知客户端，服务器对实体的主体部分的编码方式） 和 接收端：<code>Accept-Encoding</code>（用户代理支持的编码方式），值有 gzip: 当今最流行的压缩格式；deflate: 另外一种著名的压缩格式；br: 一种专门为 HTTP 发明的压缩算法</p><p>2.支持语言：<code>Content-Language</code>和<code>Accept-Language</code>（用户代理支持的自然语言集）</p><p>3.字符集：发送端：<code>Content-Type</code>中，以<code>charset</code>属性指定。接收端：<code>Accept-Charset</code>（用户代理支持的字符集）。</p><p><code>// 发送端 Content-Encoding: gzip Content-Language: zh-CN, zh, en Content-Type: text/html; charset=utf-8 // 接收端 Accept-Encoding: gzip Accept-Language: zh-CN, zh, en Accept-Charset: charset=utf-8 </code></p><p>虽然  <code>HTTP1.0</code>在<code>HTTP 0.9</code>的基础上改进了很多，但还是存在这不少的缺点</p><p><code>HTTP/1.0</code>版的主要缺点是，每个<code>TCP</code>连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。<code>TCP</code>连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（<code>slow start</code>）。</p><p><code>HTTP</code>最早期的模型，也是  <code>HTTP/1.0</code>的默认模型，是短连接。每一个<code>HTTP</code>请求都由它自己独立的连接完成；这意味着发起每一个<code>HTTP</code>请求之前都会有一次<code>TCP</code>握手，而且是连续不断的。</p><h3 id="http-1-1" tabindex="-1"><a class="header-anchor" href="#http-1-1" aria-hidden="true">#</a> HTTP 1.1</h3><p><code>HTTP/1.1</code>在1997年1月以 RFC 2068[4] 文件发布。</p><p><code>HTTP 1.1</code>消除了大量歧义内容并引入了多项技术</p><ul><li><p>连接可以复用。长连接：<code>connection: keep-alive</code>。<code>HTTP 1.1</code>支持长连接（<code>PersistentConnection</code>），在一个<code>TCP</code>连接上可以传送多个<code>HTTP</code>请求和响应，减少了建立和关闭连接的消耗和延迟，在<code>HTTP1.1</code>中默认开启<code>Connection：keep-alive</code>，一定程度上弥补了<code>HTTP1.0</code>每次请求都要创建连接的缺点。</p></li><li><p>增加了管道化技术（<code>HTTP Pipelinling</code>），允许在第一个应答被完全发送完成之前就发送第二个请求，以降低通信延迟。复用同一个<code>TCP</code>连接期间，即便是通过管道同时发送了多个请求，服务端也是按请求的顺序依次给出响应的；而客户端在未收到之前所发出所有请求的响应之前，将会阻塞后面的请求(排队等待)，这称为&quot;队头堵塞&quot;（<code>Head-of-line blocking</code>）。</p></li><li><p>支持响应分块，分块编码传输：<code>Transfer-Encoding: chunked``Content-length</code>声明本次响应的数据长度。<code>keep-alive</code>连接可以先后传送多个响应，因此用<code>Content-length</code>来区分数据包是属于哪一个响应。使用<code>Content-Length</code>字段的前提条件是，服务器发送响应之前，必须知道响应的数据长度。对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用&quot;流模式&quot;（<code>Stream</code>）取代&quot;缓存模式&quot;（<code>Buffer</code>）。因此，<code>HTTP 1.1</code>规定可以不使用<code>Content-Length</code>字段，而使用&quot;分块传输编码&quot;（<code>Chunked Transfer Encoding</code>）。只要请求或响应的头信息有<code>Transfer-Encoding: chunked</code>字段，就表明<code>body</code>将可能由数量未定的多个数据块组成。每个数据块之前会有一行包含一个 16 进制数值，表示这个块的长度；最后一个大小为 0 的块，就表示本次响应的数据发送完了。</p></li><li><p>引入额外的缓存控制机制。在<code>HTTP1.0</code>中主要使用<code>header</code>里的<code>If-Modified-Since</code>,<code>Expires</code>等来做为缓存判断的标准，<code>HTTP1.1</code>则引入了更多的缓存控制策略例如<code>Entity tag</code>,<code>If-None-Match</code>，<code>Cache-Control</code>等更多可供选择的缓存头来控制缓存策略。</p></li><li><p><code>Host</code>头。不同的域名配置同一个<code>IP</code>地址的服务器。<code>Host</code>是<code>HTTP 1.1</code>协议中新增的一个请求头，主要用来实现虚拟主机技术。</p></li></ul><p>虚拟主机（<code>virtual hosting</code>）即共享主机（<code>shared web hosting</code>），可以利用虚拟技术把一台完整的服务器分成若干个主机，因此可以在单一主机上运行多个网站或服务。</p><p>举个栗子，有一台<code>ip</code>地址为<code>61.135.169.125</code>的服务器，在这台服务器上部署着谷歌、百度、淘宝的网站。为什么我们访问<code>https://www.google.com</code>时，看到的是<code>Google</code>的首页而不是百度或者淘宝的首页？原因就是<code>Host</code>请求头决定着访问哪个虚拟主机。</p><h3 id="http-2-0" tabindex="-1"><a class="header-anchor" href="#http-2-0" aria-hidden="true">#</a> HTTP 2.0</h3><p>2015年，<code>HTTP2.0</code>面世。rfc7540[5]</p><ul><li><p><code>HTTP/2</code>是二进制协议而不是文本协议。先来看几个概念：</p></li><li><p>帧：客户端与服务器通过交换帧来通信，帧是基于这个新协议通信的最小单位。</p></li><li><p>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。</p></li><li><p>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符</p></li></ul><p><code>HTTP 2.0</code>中的帧将<code>HTTP/1.x</code>消息分成帧并嵌入到流 (<code>stream</code>) 中。数据帧和报头帧分离，这将允许报头压缩。将多个流组合，这是一个被称为多路复用 (<code>multiplexing</code>) 的过程，它允许更有效的底层<code>TCP</code>连接。</p><p>也就是说，流用来承载消息，消息又是有一个或多个帧组成。二进制传输的方式更加提升了传输性能。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。帧是流中的数据单位。</p><p><code>HTTP</code>帧现在对<code>Web</code>开发人员是透明的。在<code>HTTP/2</code>中，这是一个在  <code>HTTP/1.1</code>和底层传输协议之间附加的步骤。<code>Web</code>开发人员不需要在其使用的<code>API</code>中做任何更改来利用<code>HTTP</code>帧；当浏览器和服务器都可用时，<code>HTTP/2</code>将被打开并使用。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNMmtnuGp9WEhPwEkyR5aDKe6TeyzJmMF3v5B6KiaY6Vumw2zVJicvl6ibg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>这是一个复用协议。并行的请求能在同一个连接中处理，移除了<code>HTTP/1.x</code>中顺序和阻塞的约束。多路复用允许同时通过单一的<code>HTTP/2</code> 连接发起多重的请求-响应消息</li></ul><p>之前我们提到，虽然<code>HTTP 1.1</code>有了长连接和管道化的技术，但是还是会存在 队头阻塞。而<code>HTTP 2.0</code>就解决了这个问题<code>HTTP/2</code>中新的二进制分帧层突破了这些限制，实现了完整的请求和响应复用：客户端和服务器可以将<code>HTTP</code>消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvN40MZ3yThKr1UPgOojc2ZTXcWUBor3icxCBc3biaZg8L5hMicJ9yYlA8pg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如上图所示，快照捕捉了同一个连接内并行的多个数据流。客户端正在向服务器传输一个<code>DATA</code>帧（数据流 5），与此同时，服务器正向客户端交错发送数据流 1 和数据流 3 的一系列帧。因此，一个连接上同时有三个并行数据流。</p><p>将 HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装是<code>HTTP 2</code>最重要的一项增强。事实上，这个机制会在整个网络技术栈中引发一系列连锁反应，从而带来巨大的性能提升，让我们可以：1.并行交错地发送多个请求，请求之间互不影响。2.并行交错地发送多个响应，响应之间互不干扰。3.使用一个连接并行发送多个请求和响应。4.消除不必要的延迟和提高现有网络容量的利用率，从而减少页面加载时间。5.不必再为绕过 HTTP/1.x 限制而做很多工作(比如精灵图)    ...</p><p>连接共享，即每一个<code>request</code>都是是用作连接共享机制的。一个<code>request</code>对应一个<code>id</code>，这样一个连接上可以有多个<code>request</code>，每个连接的<code>request</code>可以随机的混杂在一起，接收方可以根据<code>request</code>的<code>id</code>将<code>request</code>再归属到各自不同的服务端请求里面。</p><p><code>HTTP 1.1</code>和<code>HTTP 2.0</code>的对比，可以参考这个网站 demo 演示[6]</p><p><code>HTTP 1.1</code>演示如下：<img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNb1ERhCvQicPiaSPL8D6bZnDblDnds2hEdBmQEIiae6DF0qK0w6HFzI11A/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><p><code>HTTP2.0</code>演示如下：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNHic2cibZbaJWMO54Gguyds8rFtAlDvUVmwLYXyjNIjBVBiboicttoqUMibg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNtOp2wyzLZuQPgSAWMianTQpFZjL06GEzqy3mIy16VsSrxatPWPu9Neg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>压缩了<code>headers</code>。<code>HTTP1.x</code>的<code>header</code>带有大量信息，而且每次都要重复发送，就造成了性能的损耗。为了减少此开销和提升性能，<code>HTTP/2</code>使用<code>HPACK</code>压缩格式压缩请求和响应标头元数据，这种格式采用两种简单但是强大的技术：这种格式支持通过静态霍夫曼代码对传输的标头字段进行编码，从而减小了各个传输的大小。这种格式要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表（换句话说，它可以建立一个共享的压缩上下文），此列表随后会用作参考，对之前传输的值进行有效编码。</li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNicZbm31mVLbTvZTrT0XhlTKFTWgmDFhFe8Qicbneiby8DLEjL8oCe87Yg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><ul><li>服务端推送。其允许服务器在客户端缓存中填充数据，通过一个叫服务器推送的机制来提前请求。服务器向客户端推送资源无需客户端明确地请求，服务端可以提前给客户端推送必要的资源，这样可以减少请求延迟时间，例如服务端可以主动把<code>JS</code>和<code>CSS</code>文件推送给客户端，而不是等到<code>HTML</code>解析到资源时发送请求，这样可以减少延迟时间大致过程如下图所示：</li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvN8GKs6xx8gDib3gxlsumSqtQr8u9xwOvCpT2TNOdKwiaWuqOHgfQ2bmTA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="如何升级你的-http-版本" tabindex="-1"><a class="header-anchor" href="#如何升级你的-http-版本" aria-hidden="true">#</a> 如何升级你的 HTTP 版本</h3><p>使用<code>HTTP/1.1</code>和<code>HTTP/2</code>对于站点和应用来说是透明的。拥有一个最新的服务器和新点的浏览器进行交互就足够了。只有一小部分群体需要做出改变，而且随着陈旧的浏览器和服务器的更新，而不需<code>Web</code>开发者做什么，用的人自然就增加了</p><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><p><code>HTTPS</code>也是通过<code>HTTP</code>协议进行传输信息，但是采用了<code>TLS</code>协议进行了加密</p><h3 id="对称加密和非对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密和非对称加密" aria-hidden="true">#</a> 对称加密和非对称加密</h3><p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。但是因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的</p><p>非对称加密</p><p>公钥大家都知道，可以用公钥加密数据。但解密数据必须使用私钥，私钥掌握在颁发公钥的一方。首先服务端将公钥发布出去，那么客户端是知道公钥的。然后客户端创建一个秘钥，并使用公钥加密，发送给服务端。服务端接收到密文以后通过私钥解密出正确的秘钥</p><h3 id="tls-握手过程" tabindex="-1"><a class="header-anchor" href="#tls-握手过程" aria-hidden="true">#</a> TLS 握手过程</h3><p><code>TLS</code>握手的过程采用的是非对称加密</p><ul><li><p><code>Client Hello</code>: 客户端发送一个随机值(<code>Random1</code>)以及需要的协议和加密方式。</p></li><li><p><code>Server Hello</code>以及<code>Certificate</code>: 服务端收到客户端的随机值，自己也产生一个随机值(<code>Random2</code>)，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）</p></li><li><p><code>Certificate Verify</code>: 客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值(<code>Random3</code>)，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</p></li><li><p><code>Server 生成 secret</code>: 服务端收到加密过的随机值并使用私钥解密获得第三个随机值(<code>Random3</code>)，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</p></li></ul><h2 id="http-缓存" tabindex="-1"><a class="header-anchor" href="#http-缓存" aria-hidden="true">#</a> HTTP 缓存</h2><h3 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h3><p>强缓存主要是由<code>Cache-control</code>和<code>Expires</code>两个<code>Header</code>决定的</p><p><code>Expires</code>的值和头里面的<code>Date</code>属性的值来判断是否缓存还有效。<code>Expires</code>是<code>Web</code>服务器响应消息头字段，在响应<code>http</code>请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。<code>Expires</code>的一个缺点就是，返回的到期时间是服务器端的时间，这是一个绝对的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），那么误差就很大。</p><p><code>Cache-Control</code>指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。但是其设置的是一个相对时间。</p><p>指定过期时间：<code>max-age</code>是距离请求发起的时间的秒数，比如下面指的是距离发起请求 31536000S 内都可以命中强缓存</p><p><code>Cache-Control: max-age=31536000</code></p><p>表示没有缓存</p><p><code>Cache-Control: no-store</code></p><p>有缓存但要重新验证</p><p><code>Cache-Control: no-cache</code></p><p>私有和公共缓存</p><p><code>public</code>表示响应可以被任何中间人（比如中间代理、<code>CDN</code>等缓存）    而<code>private</code>则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。</p><p><code>Cache-Control: private Cache-Control: public</code></p><p>验证方式：以下表示一旦资源过期（比如已经超过<code>max-age</code>），在成功向原始服务器验证之前，缓存不能用该资源响应后续请求</p><p><code>Cache-Control: must-revalidate</code></p><p><code>Cache-control</code>优先级比<code>Expires</code>优先级高</p><p>以下是一个<code>Cache-Control</code>强缓存的过程：</p><ul><li><p>首次请求，直接从 server 中获取。其中会设置<code>max-age=100</code></p></li><li><p>第二次请求，<code>age=10</code>，小于 100，则命中<code>Cache</code>，直接返回</p></li><li><p>第三次请求，<code>age=110</code>，大于 110。强缓存失效，就需要再次请求<code>Server</code></p></li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvN7PwDYajlYQsy8kAzqtEQac5eu7NtGpAGvL4kCEROQuyU34ryhVvoNw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h3><ul><li><code>If-Modified-Since——Last-Modified</code></li></ul><p><code>Last-Modified</code>表示本地文件最后修改日期，浏览器会在<code>request header</code>加上<code>If-Modified-Since</code>（上次返回的<code>Last-Modified</code>的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</p><p>但是如果在本地打开缓存文件，就会造成<code>Last-Modified</code>被修改，所以在<code>HTTP / 1.1</code>出现了<code>ETag</code></p><ul><li><code>If-none-match——ETags</code></li></ul><p><code>Etag</code>就像一个指纹，资源变化都会导致<code>ETag</code>变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的。<code>If-None-Match</code>的<code>header</code>会将上次返回的<code>Etag</code>发送给服务器，询问该资源的<code>Etag</code>是否有更新，有变动就会发送新的资源回来</p><p><code>If-none-match</code>、<code>ETags</code>优先级高于<code>If-Modified-Since、Last-Modified</code></p><p>第一次请求：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNKd9HCOXvg9evnZ8Via0v3j9cEeaauXuj2Zyic9uSds4diavSXarAVCO9g/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>第二次请求相同网页：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNDw5BPliaicNNulJDzMINsS4vIUeZuCJ7nGcCfOIXcC96ECk3V70Zmp7A/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>协商缓存，假如没有改动的话，返回 304 ，改动了返回 200 资源</p><ul><li><p>200：强缓存<code>Expires/Cache-Control</code>失效时，返回新的资源文件</p></li><li><p>200<code>(from cache)</code>: 强缓<code>Expires/Cache-Control</code>两者都存在，未过期，<code>Cache-Control</code>优先<code>Expires</code>时，浏览器从本地获取资源成功</p></li><li><p>304<code>(Not Modified)</code>：协商缓存<code>Last-modified/Etag</code>没有过期时，服务端返回状态码304</p></li></ul><p>现在的200<code>(from cache)</code>已经变成了<code>disk cache</code>(磁盘缓存)和<code>memory cache</code>(内存缓存)两种</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNviccmhz1NGPpqCcyVG9NeibNSQOibSZfrkbYQZr6TU1iarHXicUSxeVSFaw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="revving-技术" tabindex="-1"><a class="header-anchor" href="#revving-技术" aria-hidden="true">#</a> revving 技术</h3><p>上面提到<code>HTTP</code>缓存相关，但是很多有时候，我们希望上线之后需要更新线上资源。</p><p><code>web</code>开发者发明了一种被<code>Steve Souders</code>称之为<code>revving</code>的技术。不频繁更新的文件会使用特定的命名方式：在<code>URL</code>后面（通常是文件名后面）会加上版本号。</p><p>弊端：更新了版本号，所有引用这些的资源的地方的版本号都要改变</p><p><code>web</code>开发者们通常会采用自动化构建工具在实际工作中完成这些琐碎的工作。当低频更新的资源（<code>js/css</code>）变动了，只用在高频变动的资源文件（<code>html</code>）里做入口的改动。</p><h2 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> Cookies</h2><p><code>HTTP Cookie</code>（也叫<code>Web Cookie</code>或浏览器<code>Cookie</code>）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><h3 id="创建-cookie" tabindex="-1"><a class="header-anchor" href="#创建-cookie" aria-hidden="true">#</a> 创建 cookie</h3><p><code>Set-Cookie</code>响应头部和<code>Cookie</code>请求头部</p><p><code>Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</code></p><h3 id="会话期cookie" tabindex="-1"><a class="header-anchor" href="#会话期cookie" aria-hidden="true">#</a> 会话期Cookie</h3><p>会话期Cookie是最简单的<code>Cookie</code>：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。会话期<code>Cookie</code>不需要指定过期时间（<code>Expires</code>）或者有效期（<code>Max-Age</code>）。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期<code>Cookie</code>也会被保留下来，就好像浏览器从来没有关闭一样</p><h3 id="持久性cookie" tabindex="-1"><a class="header-anchor" href="#持久性cookie" aria-hidden="true">#</a> 持久性Cookie</h3><p>和关闭浏览器便失效的会话期<code>Cookie</code>不同，持久性<code>Cookie</code>可以指定一个特定的过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）。</p><p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</code></p><h3 id="cookie的secure和httponly-标记" tabindex="-1"><a class="header-anchor" href="#cookie的secure和httponly-标记" aria-hidden="true">#</a> Cookie的Secure和HttpOnly 标记</h3><p>标记为<code>Secure</code>的<code>Cookie</code>只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端。</p><p>标记为<code>Secure</code>的<code>Cookie</code>只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端。但即便设置了<code>Secure</code> 标记，敏感信息也不应该通过<code>Cookie</code>传输，因为<code>Cookie</code>有其固有的不安全性，<code>Secure</code>标记也无法提供确实的安全保障</p><p>通过<code>JavaScript</code>的<code>Document.cookie``API</code> 是无法访问带有<code>HttpOnly</code>标记的<code>cookie</code>。这么做是为了避免跨域脚本攻击（<code>XSS</code>）</p><p><code>Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</code></p><h3 id="cookie的作用域" tabindex="-1"><a class="header-anchor" href="#cookie的作用域" aria-hidden="true">#</a> Cookie的作用域</h3><p><code>Domain</code>和<code>Path</code>标识定义了<code>Cookie</code>的作用域：即<code>Cookie</code>应该发送给哪些<code>URL</code>。</p><p><code>Domain</code>标识指定了哪些主机可以接受<code>Cookie</code>。如果不指定，默认为当前的主机（不包含子域名）。如果指定了<code>Domain</code>，则一般包含子域名。</p><p>例如，如果设置<code>Domain=mozilla.org</code>，则<code>Cookie</code>也包含在子域名中（如<code>developer.mozilla.org</code>）。</p><p><code>Path</code>标识指定了主机下的哪些路径可以接受<code>Cookie</code>（该<code>URL</code>路径必须存在于请求<code>URL</code>中）。以字符 %x2F (&quot;/&quot;) 作为路径分隔符，子路径也会被匹配。</p><p>例如，设置<code>Path=/docs</code>，则以下地址都会匹配：</p><p><code>/docs /docs/Web/ /docs/Web/HTTP </code></p><h3 id="samesite-cookies" tabindex="-1"><a class="header-anchor" href="#samesite-cookies" aria-hidden="true">#</a> SameSite Cookies</h3><p><code>SameSite Cookie</code>允许服务器要求某个<code>cookie</code>在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击</p><ul><li><p><code>None</code>浏览器会在同站请求、跨站请求下继续发送<code>cookies</code>，不区分大小写。【旧版本<code>chrome</code>默认<code>Chrome 80</code>版本之前】</p></li><li><p><code>Strict</code>浏览器将只在访问相同站点时发送<code>cookie</code>。</p></li><li><p><code>Lax</code>将会为一些跨站子请求保留，如图片加载或者<code>frames</code>的调用，但只有当用户从外部站点导航到<code>URL</code>时才会发送。如<code>link</code>链接</p></li></ul><p><code>Set-Cookie: key=value; SameSite=Strict </code></p><p><code>None Strict Lax</code></p><p>在新版本的浏览器（<code>Chrome 80</code>之后）中，<code>SameSite</code>的默认属性是<code>SameSite=Lax</code>。换句话说，当<code>Cookie</code>没有设置<code>SameSite</code>属性时，将会视作<code>SameSite</code>属性被设置为<code>Lax</code>—— 这意味着<code>Cookies</code>将不会在当前用户使用时被自动发送。如果想要指定<code>Cookies</code>在同站、跨站请求都被发送，那么需要明确指定<code>SameSite</code>为<code>None</code>。因为这一点，我们需要好好排查旧系统是否明确指定<code>SameSite</code>，以及推荐新系统明确指定<code>SameSite</code>，以兼容新旧版本<code>Chrome</code></p><p>更多<code>cookie</code>相关，可以查看我之前总结的一篇关于<code>cookie</code>的文章前端须知的 Cookie 知识小结[7]</p><h2 id="http访问控制-cors" tabindex="-1"><a class="header-anchor" href="#http访问控制-cors" aria-hidden="true">#</a> HTTP访问控制（CORS）</h2><p>跨域资源共享（<code>CORS</code>）是一种机制，它使用额外的<code>HTTP</code>头告诉浏览器，让运行在一个<code>origin</code>(<code>domain</code>) 上的<code>web</code> 应用被准许访问来自不同源服务器上的指定的资源</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNDFoJrQ5cVQM7F4SKEztgUIFoibfxk6CIqBa1gzuEDNcvsSwQSqanGSw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>跨域资源共享标准新增了一组<code>HTTP</code>首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p><h3 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求" aria-hidden="true">#</a> 简单请求</h3><p>简单请求（不会触发<code>CORS</code>的预检请求）需要同时满足以下三点：</p><ul><li><p>方法是<code>GET/HEAD/POST</code>之一</p></li><li><p><code>Content-Type</code>的值仅限<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>三者之一</p></li><li><p><code>HTTP</code>头部不能超过以下字段：<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language``Content-Type</code>（需要注意额外的限制）<code>DPR</code>、<code>Downlink</code>、<code>Save-Data</code>、<code>Viewport-Width</code>、<code>Width</code></p></li></ul><p>以下为一个简单请求的请求报文以及响应报文</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNxicTnyzNjev1XibjnRXJYd3ZO8ULKzBu0GPtVLBjeE1x0ccKw9WoJ7xA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>简化以下：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNT4qibNDPb1c87QtWFIJf4mQWibnM7rtoBAzgDR5jOZicOO5zicPNbpUSuw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>请求首部字段<code>Origin</code>表明该请求来源于<code>http://foo.example</code></p><p>本例中，服务端返回的<code>Access-Control-Allow-Origin: *</code>表明，该资源可以被任意外域访问。如果服务端仅允许来自<code>http://foo.example</code>的访问，该首部字段的内容如下：</p><p><code>Access-Control-Allow-Origin: http://foo.example</code></p><p><code>Access-Control-Allow-Origin</code>应当为 * 或者包含由<code>Origin</code>首部字段所指明的域名。</p><h3 id="预检请求" tabindex="-1"><a class="header-anchor" href="#预检请求" aria-hidden="true">#</a> 预检请求</h3><p>规范要求，对那些可能对服务器数据产生副作用的<code>HTTP</code>请求方法。浏览器必须首先使用<code>OPTIONS</code>方法发起一个预检请求（<code>preflight request</code>），从而获知服务端是否允许该跨域请求。</p><p>服务器确认允许之后，才发起实际的<code>HTTP</code>请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括<code>Cookies</code>和<code>HTTP</code>认证相关数据）</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/betIP9fVPicP9mOWh8f5hp8VpYXOEAAvNyW8Ug3CAjia0LfZQIBkhH2k9tNNEqCVPswGtTHoSiaboOcnf5ib22YTpg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>预检请求中同时携带了下面两个首部字段：</p><p><code>Access-Control-Request-Method: POST Access-Control-Request-Headers: X-PINGOTHER, Content-Type</code></p><p>首部字段<code>Access-Control-Request-Method</code>告知服务器，实际请求将使用<code>POST</code>方法。首部字段<code>Access-Control-Request-Headers</code>告知服务器，实际请求将携带两个自定义请求首部字段：<code>X-PINGOTHER</code>与<code>Content-Type</code>。服务器据此决定，该实际请求是否被允许。</p><p>预检请求的响应中，包括了以下几个字段</p><p><code>Access-Control-Allow-Origin: http://foo.example // 表明服务器允许客户端使用 POST, GET 和 OPTIONS 方法发起请求 Access-Control-Allow-Methods: POST, GET, OPTIONS // 表明服务器允许请求中携带字段 X-PINGOTHER 与 Content-Type Access-Control-Allow-Headers: X-PINGOTHER, Content-Type // 表明该响应的有效时间为 86400 秒，也就是 24 小时。在有效时间内，浏览器无须为同一请求再次发起预检请求。 Access-Control-Max-Age: 86400</code></p><p>HTTP 请求和响应    一般而言，对于跨域<code>XMLHttpRequest</code>或<code>Fetch</code>请求，浏览器不会发送身份凭证信息。如果要发送凭证信息，需要设置<code>XMLHttpRequest</code>的某个特殊标志位。比如说<code>XMLHttpRequest</code>的<code>withCredentials</code>标志设置为<code>true</code>，则可以发送<code>cookie</code>到服务端。</p><p>对于附带身份凭证的请求，服务器不得设置<code>Access-Control-Allow-Origin</code>的值为“<em>”。这是因为请求的首部中携带了<code>Cookie</code>信息，如果<code>Access-Control-Allow-Origin</code>的值为“</em>”，请求将会失败。而将<code>Access-Control-Allow-Origin</code>的值设置为<code>http://foo.example</code>，则请求将成功执行。</p><p><code>CORS</code>涉及到的请求和响应头如下：<code>HTTP</code>响应首部字段</p><ul><li><p><code>Access-Control-Allow-Origin</code>允许访问该资源的外域<code>URI</code>。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p></li><li><p><code>Access-Control-Expose-Headers</code>头让服务器把允许浏览器访问的头放入白名单</p></li><li><p><code>Access-Control-Max-Age</code>头指定了<code>preflight</code>请求的结果能够被缓存多久</p></li><li><p><code>Access-Control-Allow-Credentials</code>头指定了当浏览器的<code>credentials</code>设置为<code>true</code>时是否允许浏览器读取<code>response</code>的内容。</p></li><li><p><code>Access-Control-Allow-Methods</code>首部字段用于预检请求的响应。其指明了实际请求所允许使用的<code>HTTP</code>方法。</p></li><li><p><code>Access-Control-Allow-Headers</code>首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p></li></ul><p><code>HTTP</code>请求首部字段</p><ul><li><p><code>Origin</code>首部字段表明预检请求或实际请求的源站</p></li><li><p><code>Access-Control-Request-Method</code>首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</p></li><li><p><code>Access-Control-Request-Headers</code>首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</p></li></ul>',237),a=[p];function t(n,r){return o(),c("div",null,a)}const h=e(i,[["render",t],["__file","前端HTTP知识.html.vue"]]);export{h as default};
