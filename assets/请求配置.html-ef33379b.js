const n=JSON.parse('{"key":"v-0f88d53c","path":"/Tech/Front-end/03_VUE/axios%E6%A8%A1%E5%9D%97/%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE.html","title":"","lang":"en-US","frontmatter":{"description":"请求配置 这些是创建请求时可以用的配置选项。只有&nbsp;url&nbsp;是必需的。如果没有指定&nbsp;method，请求将默认使用&nbsp;get&nbsp;方法。 { // `url` 是用于请求的服务器 URL url: \'/user\', // `method` 是创建请求时使用的方法 method: \'get\', // default // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。 // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL baseURL: \'https://some-domain.com/api/\', // `transformRequest` 允许在向服务器发送前，修改请求数据 // 只能用在 \'PUT\', \'POST\' 和 \'PATCH\' 这几个请求方法 // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream transformRequest: [function (data, headers) { // 对 data 进行任意转换处理 return data; }], // `transformResponse` 在传递给 then/catch 前，允许修改响应数据 transformResponse: [function (data) { // 对 data 进行任意转换处理 return data; }], // `headers` 是即将被发送的自定义请求头 headers: {\'X-Requested-With\': \'XMLHttpRequest\'}, // `params` 是即将与请求一起发送的 URL 参数 // 必须是一个无格式对象(plain object)或 URLSearchParams 对象 params: { ID: 12345 }, // `paramsSerializer` 是一个负责 `params` 序列化的函数 // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/) paramsSerializer: function(params) { return Qs.stringify(params, {arrayFormat: \'brackets\'}) }, // `data` 是作为请求主体被发送的数据 // 只适用于这些请求方法 \'PUT\', \'POST\', 和 \'PATCH\' // 在没有设置 `transformRequest` 时，必须是以下类型之一： // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams // - 浏览器专属：FormData, File, Blob // - Node 专属： Stream data: { firstName: \'Fred\' }, // `timeout` 指定请求超时的毫秒数(0 表示无超时时间) // 如果请求话费了超过 `timeout` 的时间，请求将被中断 timeout: 1000, // `withCredentials` 表示跨域请求时是否需要使用凭证 withCredentials: false, // default // `adapter` 允许自定义处理请求，以使测试更轻松 // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)). adapter: function (config) { /* ... */ }, // `auth` 表示应该使用 HTTP 基础验证，并提供凭据 // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头 auth: { username: \'janedoe\', password: \'s00pers3cret\' }, // `responseType` 表示服务器响应的数据类型，可以是 \'arraybuffer\', \'blob\', \'document\', \'json\', \'text\', \'stream\' responseType: \'json\', // default // `responseEncoding` indicates encoding to use for decoding responses // Note: Ignored for `responseType` of \'stream\' or client-side requests responseEncoding: \'utf8\', // default // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称 xsrfCookieName: \'XSRF-TOKEN\', // default // `xsrfHeaderName` is the name of the http header that carries the xsrf token value xsrfHeaderName: \'X-XSRF-TOKEN\', // default // `onUploadProgress` 允许为上传处理进度事件 onUploadProgress: function (progressEvent) { // Do whatever you want with the native progress event }, // `onDownloadProgress` 允许为下载处理进度事件 onDownloadProgress: function (progressEvent) { // 对原生进度事件的处理 }, // `maxContentLength` 定义允许的响应内容的最大尺寸 maxContentLength: 2000, // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte validateStatus: function (status) { return status &gt;= 200 &amp;&amp; status &lt; 300; // default }, // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目 // 如果设置为0，将不会 follow 任何重定向 maxRedirects: 5, // default // `socketPath` defines a UNIX Socket to be used in node.js. // e.g. \'/var/run/docker.sock\' to send requests to the docker daemon. // Only either `socketPath` or `proxy` can be specified. // If both are specified, `socketPath` is used. socketPath: null, // default // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项： // `keepAlive` 默认没有启用 httpAgent: new http.Agent({ keepAlive: true }), httpsAgent: new https.Agent({ keepAlive: true }), // \'proxy\' 定义代理服务器的主机名称和端口 // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据 // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。 proxy: { host: \'127.0.0.1\', port: 9000, auth: { username: \'mikeymike\', password: \'rapunz3l\' } }, // `cancelToken` 指定用于取消请求的 cancel token // （查看后面的 Cancellation 这节了解更多） cancelToken: new CancelToken(function (cancel) { })","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/03_VUE/axios%E6%A8%A1%E5%9D%97/%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"请求配置 这些是创建请求时可以用的配置选项。只有&nbsp;url&nbsp;是必需的。如果没有指定&nbsp;method，请求将默认使用&nbsp;get&nbsp;方法。 { // `url` 是用于请求的服务器 URL url: \'/user\', // `method` 是创建请求时使用的方法 method: \'get\', // default // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。 // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL baseURL: \'https://some-domain.com/api/\', // `transformRequest` 允许在向服务器发送前，修改请求数据 // 只能用在 \'PUT\', \'POST\' 和 \'PATCH\' 这几个请求方法 // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream transformRequest: [function (data, headers) { // 对 data 进行任意转换处理 return data; }], // `transformResponse` 在传递给 then/catch 前，允许修改响应数据 transformResponse: [function (data) { // 对 data 进行任意转换处理 return data; }], // `headers` 是即将被发送的自定义请求头 headers: {\'X-Requested-With\': \'XMLHttpRequest\'}, // `params` 是即将与请求一起发送的 URL 参数 // 必须是一个无格式对象(plain object)或 URLSearchParams 对象 params: { ID: 12345 }, // `paramsSerializer` 是一个负责 `params` 序列化的函数 // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/) paramsSerializer: function(params) { return Qs.stringify(params, {arrayFormat: \'brackets\'}) }, // `data` 是作为请求主体被发送的数据 // 只适用于这些请求方法 \'PUT\', \'POST\', 和 \'PATCH\' // 在没有设置 `transformRequest` 时，必须是以下类型之一： // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams // - 浏览器专属：FormData, File, Blob // - Node 专属： Stream data: { firstName: \'Fred\' }, // `timeout` 指定请求超时的毫秒数(0 表示无超时时间) // 如果请求话费了超过 `timeout` 的时间，请求将被中断 timeout: 1000, // `withCredentials` 表示跨域请求时是否需要使用凭证 withCredentials: false, // default // `adapter` 允许自定义处理请求，以使测试更轻松 // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)). adapter: function (config) { /* ... */ }, // `auth` 表示应该使用 HTTP 基础验证，并提供凭据 // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头 auth: { username: \'janedoe\', password: \'s00pers3cret\' }, // `responseType` 表示服务器响应的数据类型，可以是 \'arraybuffer\', \'blob\', \'document\', \'json\', \'text\', \'stream\' responseType: \'json\', // default // `responseEncoding` indicates encoding to use for decoding responses // Note: Ignored for `responseType` of \'stream\' or client-side requests responseEncoding: \'utf8\', // default // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称 xsrfCookieName: \'XSRF-TOKEN\', // default // `xsrfHeaderName` is the name of the http header that carries the xsrf token value xsrfHeaderName: \'X-XSRF-TOKEN\', // default // `onUploadProgress` 允许为上传处理进度事件 onUploadProgress: function (progressEvent) { // Do whatever you want with the native progress event }, // `onDownloadProgress` 允许为下载处理进度事件 onDownloadProgress: function (progressEvent) { // 对原生进度事件的处理 }, // `maxContentLength` 定义允许的响应内容的最大尺寸 maxContentLength: 2000, // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte validateStatus: function (status) { return status &gt;= 200 &amp;&amp; status &lt; 300; // default }, // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目 // 如果设置为0，将不会 follow 任何重定向 maxRedirects: 5, // default // `socketPath` defines a UNIX Socket to be used in node.js. // e.g. \'/var/run/docker.sock\' to send requests to the docker daemon. // Only either `socketPath` or `proxy` can be specified. // If both are specified, `socketPath` is used. socketPath: null, // default // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项： // `keepAlive` 默认没有启用 httpAgent: new http.Agent({ keepAlive: true }), httpsAgent: new https.Agent({ keepAlive: true }), // \'proxy\' 定义代理服务器的主机名称和端口 // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据 // 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。 proxy: { host: \'127.0.0.1\', port: 9000, auth: { username: \'mikeymike\', password: \'rapunz3l\' } }, // `cancelToken` 指定用于取消请求的 cancel token // （查看后面的 Cancellation 这节了解更多） cancelToken: new CancelToken(function (cancel) { })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"请求配置","slug":"请求配置","link":"#请求配置","children":[]},{"level":2,"title":"响应结构","slug":"响应结构","link":"#响应结构","children":[]},{"level":2,"title":"配置默认值","slug":"配置默认值","link":"#配置默认值","children":[{"level":3,"title":"全局的 axios 默认值","slug":"全局的-axios-默认值","link":"#全局的-axios-默认值","children":[]},{"level":3,"title":"自定义实例默认值","slug":"自定义实例默认值","link":"#自定义实例默认值","children":[]},{"level":3,"title":"配置的优先顺序","slug":"配置的优先顺序","link":"#配置的优先顺序","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.27,"words":1580},"filePathRelative":"Tech/Front-end/03_VUE/axios模块/请求配置.md","excerpt":"<h2> 请求配置</h2>\\n<p>这些是创建请求时可以用的配置选项。只有&nbsp;<code>url</code>&nbsp;是必需的。如果没有指定&nbsp;<code>method</code>，请求将默认使用&nbsp;<code>get</code>&nbsp;方法。</p>\\n<p>{</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code> <span class=\\"token comment\\">// `url` 是用于请求的服务器 URL  </span>\\n <span class=\\"token literal-property property\\">url</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'/user\'</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `method` 是创建请求时使用的方法  </span>\\n <span class=\\"token literal-property property\\">method</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'get\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n <span class=\\"token comment\\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。  </span>\\n <span class=\\"token comment\\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL  </span>\\n <span class=\\"token literal-property property\\">baseURL</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'https://some-domain.com/api/\'</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `transformRequest` 允许在向服务器发送前，修改请求数据  </span>\\n <span class=\\"token comment\\">// 只能用在 \'PUT\', \'POST\' 和 \'PATCH\' 这几个请求方法  </span>\\n <span class=\\"token comment\\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream  </span>\\n <span class=\\"token literal-property property\\">transformRequest</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data<span class=\\"token punctuation\\">,</span> headers</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token comment\\">// 对 data 进行任意转换处理  </span>\\n   <span class=\\"token keyword\\">return</span> data<span class=\\"token punctuation\\">;</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据  </span>\\n <span class=\\"token literal-property property\\">transformResponse</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token comment\\">// 对 data 进行任意转换处理  </span>\\n   <span class=\\"token keyword\\">return</span> data<span class=\\"token punctuation\\">;</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `headers` 是即将被发送的自定义请求头  </span>\\n <span class=\\"token literal-property property\\">headers</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token string-property property\\">\'X-Requested-With\'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'XMLHttpRequest\'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `params` 是即将与请求一起发送的 URL 参数  </span>\\n <span class=\\"token comment\\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象  </span>\\n <span class=\\"token literal-property property\\">params</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token constant\\">ID</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">12345</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n  <span class=\\"token comment\\">// `paramsSerializer` 是一个负责 `params` 序列化的函数  </span>\\n <span class=\\"token comment\\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)  </span>\\n <span class=\\"token function-variable function\\">paramsSerializer</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">params</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token keyword\\">return</span> Qs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span>params<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">arrayFormat</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'brackets\'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `data` 是作为请求主体被发送的数据  </span>\\n <span class=\\"token comment\\">// 只适用于这些请求方法 \'PUT\', \'POST\', 和 \'PATCH\'  </span>\\n <span class=\\"token comment\\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：  </span>\\n <span class=\\"token comment\\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams  </span>\\n <span class=\\"token comment\\">// - 浏览器专属：FormData, File, Blob  </span>\\n <span class=\\"token comment\\">// - Node 专属： Stream  </span>\\n <span class=\\"token literal-property property\\">data</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token literal-property property\\">firstName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'Fred\'</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)  </span>\\n <span class=\\"token comment\\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断  </span>\\n <span class=\\"token literal-property property\\">timeout</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">,</span>  \\n \\n  <span class=\\"token comment\\">// `withCredentials` 表示跨域请求时是否需要使用凭证  </span>\\n <span class=\\"token literal-property property\\">withCredentials</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n <span class=\\"token comment\\">// `adapter` 允许自定义处理请求，以使测试更轻松  </span>\\n <span class=\\"token comment\\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).  </span>\\n <span class=\\"token function-variable function\\">adapter</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">config</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token comment\\">/* ... */</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n<span class=\\"token comment\\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据  </span>\\n <span class=\\"token comment\\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头  </span>\\n <span class=\\"token literal-property property\\">auth</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token literal-property property\\">username</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'janedoe\'</span><span class=\\"token punctuation\\">,</span>  \\n   <span class=\\"token literal-property property\\">password</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'s00pers3cret\'</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n  <span class=\\"token comment\\">// `responseType` 表示服务器响应的数据类型，可以是 \'arraybuffer\', \'blob\', \'document\', \'json\', \'text\', \'stream\'  </span>\\n <span class=\\"token literal-property property\\">responseType</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'json\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n <span class=\\"token comment\\">// `responseEncoding` indicates encoding to use for decoding responses  </span>\\n <span class=\\"token comment\\">// Note: Ignored for `responseType` of \'stream\' or client-side requests  </span>\\n <span class=\\"token literal-property property\\">responseEncoding</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'utf8\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n  <span class=\\"token comment\\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称  </span>\\n <span class=\\"token literal-property property\\">xsrfCookieName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'XSRF-TOKEN\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n <span class=\\"token comment\\">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value  </span>\\n <span class=\\"token literal-property property\\">xsrfHeaderName</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'X-XSRF-TOKEN\'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n  <span class=\\"token comment\\">// `onUploadProgress` 允许为上传处理进度事件  </span>\\n <span class=\\"token function-variable function\\">onUploadProgress</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">progressEvent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token comment\\">// Do whatever you want with the native progress event  </span>\\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `onDownloadProgress` 允许为下载处理进度事件  </span>\\n <span class=\\"token function-variable function\\">onDownloadProgress</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">progressEvent</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token comment\\">// 对原生进度事件的处理  </span>\\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n  <span class=\\"token comment\\">// `maxContentLength` 定义允许的响应内容的最大尺寸  </span>\\n <span class=\\"token literal-property property\\">maxContentLength</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2000</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte  </span>\\n <span class=\\"token function-variable function\\">validateStatus</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">status</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token keyword\\">return</span> status <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">200</span> <span class=\\"token operator\\">&amp;&amp;</span> status <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">300</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// default  </span>\\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目  </span>\\n <span class=\\"token comment\\">// 如果设置为0，将不会 follow 任何重定向  </span>\\n <span class=\\"token literal-property property\\">maxRedirects</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n <span class=\\"token comment\\">// `socketPath` defines a UNIX Socket to be used in node.js.  </span>\\n <span class=\\"token comment\\">// e.g. \'/var/run/docker.sock\' to send requests to the docker daemon.  </span>\\n <span class=\\"token comment\\">// Only either `socketPath` or `proxy` can be specified.  </span>\\n <span class=\\"token comment\\">// If both are specified, `socketPath` is used.  </span>\\n <span class=\\"token literal-property property\\">socketPath</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// default  </span>\\n \\n <span class=\\"token comment\\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：  </span>\\n <span class=\\"token comment\\">// `keepAlive` 默认没有启用  </span>\\n <span class=\\"token literal-property property\\">httpAgent</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">http<span class=\\"token punctuation\\">.</span>Agent</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">keepAlive</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>  \\n <span class=\\"token literal-property property\\">httpsAgent</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">https<span class=\\"token punctuation\\">.</span>Agent</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">keepAlive</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// \'proxy\' 定义代理服务器的主机名称和端口  </span>\\n <span class=\\"token comment\\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据  </span>\\n <span class=\\"token comment\\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。  </span>\\n <span class=\\"token literal-property property\\">proxy</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>  \\n   <span class=\\"token literal-property property\\">host</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'127.0.0.1\'</span><span class=\\"token punctuation\\">,</span>  \\n   <span class=\\"token literal-property property\\">port</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">9000</span><span class=\\"token punctuation\\">,</span>  \\n   <span class=\\"token literal-property property\\">auth</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>  \\n     <span class=\\"token literal-property property\\">username</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'mikeymike\'</span><span class=\\"token punctuation\\">,</span>  \\n     <span class=\\"token literal-property property\\">password</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\'rapunz3l\'</span>  \\n   <span class=\\"token punctuation\\">}</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>  \\n \\n <span class=\\"token comment\\">// `cancelToken` 指定用于取消请求的 cancel token  </span>\\n <span class=\\"token comment\\">// （查看后面的 Cancellation 这节了解更多）  </span>\\n <span class=\\"token literal-property property\\">cancelToken</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CancelToken</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">cancel</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>  \\n <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>  \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
