import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,f as i}from"./app-9e438faa.js";const t={},d=i(`<p>https://jasonkayzk.github.io/2020/05/03/Git-Stash%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</p><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><h4 id="场景一" tabindex="-1"><a class="header-anchor" href="#场景一" aria-hidden="true">#</a> 场景一</h4><p>当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容。</p><p>工作区的内容如果没有提交的话无法成功切换分支。</p><h4 id="场景二" tabindex="-1"><a class="header-anchor" href="#场景二" aria-hidden="true">#</a> 场景二</h4><p>由于疏忽，<strong>本应该在dev分支开发的内容，却在master上进行了开发</strong>，需要重新切回到dev分支上进行开发，可以用git stash将内容保存至堆栈中，切回到dev分支后，再次恢复内容即可。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>总的来说，<strong>git stash命令的作用就是将目前还不想提交的但是已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。</strong></p><p>这也就是说，stash中的内容<strong>不仅仅可以恢复到原先开发的分支，也可以恢复到其他任意指定的分支上。</strong></p><p><strong>git stash作用的范围包括工作区和暂存区中的内容，也就是说没有提交的内容都会保存至堆栈中。</strong></p><p><strong>但是没有在git 版本控制中的文件，是不能被git stash 存起来的</strong></p><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h3><h4 id="暂存" tabindex="-1"><a class="header-anchor" href="#暂存" aria-hidden="true">#</a> 暂存</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash

git stash save &quot;save message&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="恢复" tabindex="-1"><a class="header-anchor" href="#恢复" aria-hidden="true">#</a> 恢复</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash pop   弹出上一个储藏，内容也会在堆栈中删除

git stash apply  // git stash apply stash@{2}
将堆栈中的内容应用到当前目录，且不会删除堆栈中的内容，适用于将堆栈中的内容多次应用到不同工作目录中的场景

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看" tabindex="-1"><a class="header-anchor" href="#查看" aria-hidden="true">#</a> 查看</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash list   查看当前stash中的内容，可以查看不同储存的名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="移除堆栈中的储存" tabindex="-1"><a class="header-anchor" href="#移除堆栈中的储存" aria-hidden="true">#</a> 移除堆栈中的储存</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash drop + 名称
git stash drop stash@{2}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="清除堆栈中所有的内容" tabindex="-1"><a class="header-anchor" href="#清除堆栈中所有的内容" aria-hidden="true">#</a> 清除堆栈中所有的内容</h4><p><code>git stash clear</code></p><h4 id="查看堆栈中的储存与当前目录的差异" tabindex="-1"><a class="header-anchor" href="#查看堆栈中的储存与当前目录的差异" aria-hidden="true">#</a> 查看堆栈中的储存与当前目录的差异</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git stash show 查看最新保存的stash与现在目录的差异
git stash show -p 详细版
git stash show +stash名称 查看堆栈中的任意一个stash跟当前目录的差异
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从最新的stash创建分支" tabindex="-1"><a class="header-anchor" href="#从最新的stash创建分支" aria-hidden="true">#</a> 从最新的stash创建分支</h4><p><code>git stash branch</code> 应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发，后续想将stash中的内容恢复到当前工作目录时，如果是针对同一个文件的修改（即便不是同行数据），那么可能会发生冲突，恢复失败，这里通过创建新的分支来解决。</p><p>可以用于解决stash中的内容和当前目录的内容发生冲突的情景。</p><p>当发生冲突时，需手动解决冲突</p>`,29),n=[d];function r(h,l){return a(),s("div",null,n)}const u=e(t,[["render",r],["__file","git stash的使用.html.vue"]]);export{u as default};
