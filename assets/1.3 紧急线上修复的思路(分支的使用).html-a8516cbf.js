const t=JSON.parse('{"key":"v-ac9888b2","path":"/Tech/Git/1.3%20%E7%B4%A7%E6%80%A5%E7%BA%BF%E4%B8%8A%E4%BF%AE%E5%A4%8D%E7%9A%84%E6%80%9D%E8%B7%AF(%E5%88%86%E6%94%AF%E7%9A%84%E4%BD%BF%E7%94%A8).html","title":"","lang":"en-US","frontmatter":{"description":"场景 新功能开发了一半甚至已经要完成了的时候，线上突然出现了bug，我们怎么修？ 马上修，把没做完的新功能也发到线上 没做完就发，会有很多未知的问题 回退到之前的版本再修 前功尽弃，重新做一遍 新功能做完再修 太紧急了，等不了 怎么办？ 分支运用 开发新功能的时候应该拉一个新的分支，不应该在master上面进行改动 将dev分支上的未提交的改动先提交或者stash起来[[git stash的使用]] bug出现时，基于线上的旧版本的代码拉另外一个hotfix的分支 开发人员切换到hotfix分支，修复之后将代码发到线上，即与master分支进行合并 然后切换到新功能开发的分支，照常进行开发，开发完成之后进行发版，即与master分支进行代码合并 删除hotfix分支 切回dev分支继续进行新功能的开发 开发完新功能之后切回来master分支，把代码合并","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Git/1.3%20%E7%B4%A7%E6%80%A5%E7%BA%BF%E4%B8%8A%E4%BF%AE%E5%A4%8D%E7%9A%84%E6%80%9D%E8%B7%AF(%E5%88%86%E6%94%AF%E7%9A%84%E4%BD%BF%E7%94%A8).html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"场景 新功能开发了一半甚至已经要完成了的时候，线上突然出现了bug，我们怎么修？ 马上修，把没做完的新功能也发到线上 没做完就发，会有很多未知的问题 回退到之前的版本再修 前功尽弃，重新做一遍 新功能做完再修 太紧急了，等不了 怎么办？ 分支运用 开发新功能的时候应该拉一个新的分支，不应该在master上面进行改动 将dev分支上的未提交的改动先提交或者stash起来[[git stash的使用]] bug出现时，基于线上的旧版本的代码拉另外一个hotfix的分支 开发人员切换到hotfix分支，修复之后将代码发到线上，即与master分支进行合并 然后切换到新功能开发的分支，照常进行开发，开发完成之后进行发版，即与master分支进行代码合并 删除hotfix分支 切回dev分支继续进行新功能的开发 开发完新功能之后切回来master分支，把代码合并"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.63,"words":488},"filePathRelative":"Tech/Git/1.3 紧急线上修复的思路(分支的使用).md","excerpt":"<h4> 场景</h4>\\n<p>新功能开发了一半甚至已经要完成了的时候，线上突然出现了bug，我们怎么修？</p>\\n<ul>\\n<li>马上修，把没做完的新功能也发到线上\\n<ul>\\n<li>没做完就发，会有很多未知的问题</li>\\n</ul>\\n</li>\\n<li>回退到之前的版本再修\\n<ul>\\n<li>前功尽弃，重新做一遍</li>\\n</ul>\\n</li>\\n<li>新功能做完再修\\n<ul>\\n<li>太紧急了，等不了</li>\\n</ul>\\n</li>\\n</ul>\\n<p>怎么办？</p>\\n<h4> 分支运用</h4>\\n<ul>\\n<li>开发新功能的时候应该拉一个新的分支，不应该在master上面进行改动</li>\\n<li>将dev分支上的未提交的改动先提交或者stash起来[[git stash的使用]]</li>\\n<li>bug出现时，基于线上的旧版本的代码拉另外一个hotfix的分支</li>\\n<li>开发人员切换到hotfix分支，修复之后将代码发到线上，即与<code>master</code>分支进行合并</li>\\n<li>然后切换到新功能开发的分支，照常进行开发，开发完成之后进行发版，即与<code>master</code>分支进行代码合并</li>\\n<li>删除hotfix分支</li>\\n<li>切回dev分支继续进行新功能的开发</li>\\n<li>开发完新功能之后切回来master分支，把代码合并</li>\\n</ul>","autoDesc":true}');export{t as data};
