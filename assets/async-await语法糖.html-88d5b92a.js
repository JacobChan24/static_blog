const e=JSON.parse('{"key":"v-0e93ecb9","path":"/Tech/Front-end/02_Javascript/Basics/async-await%E8%AF%AD%E6%B3%95%E7%B3%96.html","title":"","lang":"en-US","frontmatter":{"description":"在 JavaScript 中，await 关键字只能在异步函数（被 async 关键字标记的函数）中使用。当遇到 await 关键字时，它会暂停当前异步函数的执行，并等待一个 Promise 对象的解析结果。 具体来说，当遇到 await 关键字时，以下情况可能发生： 如果 await 后面的表达式是一个 Promise 对象，并且该 Promise 对象处于未解析（pending）状态，await 会阻塞当前的异步函数执行，并暂时将控制权返回给调用者。这意味着其他任务可以在此期间继续执行。 如果 await 后面的表达式是一个已解析（resolved）的 Promise 对象，即 Promise 的状态变为成功，await 将立即返回 Promise 对象的解析值，并继续执行异步函数后面的代码。 如果 await 后面的表达式是一个拒绝（rejected）的 Promise 对象，即 Promise 的状态变为失败，await 将抛出一个异常，并进入到异步函数的异常处理逻辑（可以使用 try/catch 捕获异常）。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Front-end/02_Javascript/Basics/async-await%E8%AF%AD%E6%B3%95%E7%B3%96.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"在 JavaScript 中，await 关键字只能在异步函数（被 async 关键字标记的函数）中使用。当遇到 await 关键字时，它会暂停当前异步函数的执行，并等待一个 Promise 对象的解析结果。 具体来说，当遇到 await 关键字时，以下情况可能发生： 如果 await 后面的表达式是一个 Promise 对象，并且该 Promise 对象处于未解析（pending）状态，await 会阻塞当前的异步函数执行，并暂时将控制权返回给调用者。这意味着其他任务可以在此期间继续执行。 如果 await 后面的表达式是一个已解析（resolved）的 Promise 对象，即 Promise 的状态变为成功，await 将立即返回 Promise 对象的解析值，并继续执行异步函数后面的代码。 如果 await 后面的表达式是一个拒绝（rejected）的 Promise 对象，即 Promise 的状态变为失败，await 将抛出一个异常，并进入到异步函数的异常处理逻辑（可以使用 try/catch 捕获异常）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.48,"words":445},"filePathRelative":"Tech/Front-end/02_Javascript/Basics/async-await语法糖.md","excerpt":"<p>在 JavaScript 中，<code>await</code> 关键字只能在异步函数（被 <code>async</code> 关键字标记的函数）中使用。当遇到 <code>await</code> 关键字时，它会暂停当前异步函数的执行，并等待一个 Promise 对象的解析结果。</p>\\n<p>具体来说，当遇到 <code>await</code> 关键字时，以下情况可能发生：</p>\\n<ol>\\n<li>如果 <code>await</code> 后面的表达式是一个 Promise 对象，并且该 Promise 对象处于未解析（pending）状态，<code>await</code> 会阻塞当前的异步函数执行，并暂时将控制权返回给调用者。这意味着其他任务可以在此期间继续执行。</li>\\n<li>如果 <code>await</code> 后面的表达式是一个已解析（resolved）的 Promise 对象，即 Promise 的状态变为成功，<code>await</code> 将立即返回 Promise 对象的解析值，并继续执行异步函数后面的代码。</li>\\n<li>如果 <code>await</code> 后面的表达式是一个拒绝（rejected）的 Promise 对象，即 Promise 的状态变为失败，<code>await</code> 将抛出一个异常，并进入到异步函数的异常处理逻辑（可以使用 <code>try/catch</code> 捕获异常）。</li>\\n</ol>","autoDesc":true}');export{e as data};
