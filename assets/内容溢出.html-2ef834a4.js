import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as l,f as t}from"./app-9e438faa.js";const r={},p=t("<ul><li><p>when will it happen?</p><p>根据正常的[[文档流]]的设置，即容器的高度由内容天然地决定，是不存在内容会溢出容器的情况的，只有在我们<strong>限定了一个元素的高度的时候</strong>，内容才有可能溢出容器，内容在限定的区域放不下，就可能渲染到父容器的外面，而**[[文档流]]不考虑溢出的情况，容器下方的任何元素都会渲染到溢出内容的上面** ![[Pasted image 20220519155730.png]]</p></li></ul><p>-溢出控制属性——overflow overflow: visible(default)；——所有内容可见，即使溢出容器边缘 overflow: hidden;——溢出容器内边距边缘的内容被裁剪，无法看见 overflow: scroll;——容器出现滚动条，用户可以通过滚动查看剩余内容。在一些操作系统上，会出现水平和垂直两种滚动条，即使所有内容都可见（不溢出）。不过，在这种情况下，滚动条不可滚动（置灰）。 overflow: auto;——只有内容溢出的时候才会出现滚动条 ![[Pasted image 20220519160334.png]]</p><ul><li><p>关于滚动条</p><p>请谨慎地使用滚动条。浏览器给网页最外层加上了滚动条，如果网页内部再嵌套滚动区域，用户就会很反感。如果用户使用鼠标滚轮滚动网页，当鼠标到达一个较小的滚动区域，滚轮就会停止滚动网页，转而滚动较小的区域。</p></li><li><p>水平方向的溢出 除了垂直溢出，内容也可能在水平方向溢出。一个典型的场景就是在一个很窄的容器中放 一条很长的URL。溢出的规则跟垂直方向上的一致。</p><p>可以用overflow-x 属性单独控制水平方向的溢出，或者用overflow-y 控制垂直方向 溢出。这些属性支持overflow 的所有值，然而同时给x 和y 指定不同的值，往往会产生难 以预料的结果。</p></li></ul>",3),i=[p];function n(s,_){return o(),l("div",null,i)}const f=e(r,[["render",n],["__file","内容溢出.html.vue"]]);export{f as default};
