import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as o}from"./app-9e438faa.js";const d={},c=o('<p>原文链接：https://mp.weixin.qq.com/s/a3FJxEtsWO65htzWuZyKuA</p><p>chrome浏览器作为前端童鞋的<code>老婆</code>，相信你一定不陌生。<code>调页面</code>、<code>写BUG</code>、<code>画样式</code>少了它整个世界都不香了。</p><p>不信？一起来看看我们的<code>老婆</code>有多厉害....</p><h2 id="_1-一键重新发起请求" tabindex="-1"><a class="header-anchor" href="#_1-一键重新发起请求" aria-hidden="true">#</a> 1#. 一键重新发起请求</h2><p>在与后端接口联调或排查线上BUG时，你是不是也经常听到他们说这句话：<strong>你再发起一次请求试试，我这边看下为啥出错了！</strong></p><p>重发请求，这有一种简单到发指的方式。</p><ol><li><p>选中<code>Network</code></p></li><li><p>点击<code>Fetch/XHR</code></p></li><li><p>选择要重新发送的请求</p></li><li><p>右键选择<code>Replay XHR</code></p></li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjthApsKSf6w1txTP8PjJuCpb0R0LMjrmDI74vhgibuO6r94zb5462Ix9g/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>不用刷新页面，不用走页面交互，是不是非常爽！！！</p><h2 id="_2-在控制台快速发起请求" tabindex="-1"><a class="header-anchor" href="#_2-在控制台快速发起请求" aria-hidden="true">#</a> 2#. 在控制台快速发起请求</h2><p>还是联调或修BUG的场景，针对同样的请求，有时候需要<strong>修改入参</strong>重新发起，有啥快捷方式？</p><ol><li><p>选中<code>Network</code></p></li><li><p>点击<code>Fetch/XHR</code></p></li><li><p>选择<code>Copy as fetch</code></p></li><li><p>控制台粘贴代码</p></li><li><p>修改参数，回车搞定</p></li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtNvUTd107Csj369ucia6H3zR83Tw5GDmB3mmX2zMTwDPp6MLesFKAIGg/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>曾经我总是通过改代码或者手写<code>fetch</code>的方式处理，想想真是太傻了...</p><h2 id="_3-复制javascript变量" tabindex="-1"><a class="header-anchor" href="#_3-复制javascript变量" aria-hidden="true">#</a> 3#. 复制JavaScript变量</h2><p>假如你的代码经过计算会输出一个<strong>复杂的对象</strong>，且需要被复制下来发送给其他人，怎么办？</p><ol><li>使用<code>copy</code>函数，将<code>对象</code>作为入参执行即可</li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtysca1v0dOjqPZcD6OpXmZd7DgJqreC7miaeEGxhm8fzoCUfcUzAgHicw/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>以前我总是通过<code>JSON.stringify(fetfishObj, null, 2)</code>打印到控制台，再手动复制粘贴，这效率实在是太低了...</p><h2 id="_4-控制台获取elements面板选中的元素" tabindex="-1"><a class="header-anchor" href="#_4-控制台获取elements面板选中的元素" aria-hidden="true">#</a> 4#. 控制台获取Elements面板选中的元素</h2><p>调试网页时通过<code>Elements</code>面板选中元素后，如果想通过<code>JS</code>知道它的一些属性，如<code>宽</code>、<code>高</code>、<code>位置</code>等怎么办呢？</p><ol><li><p>通过<code>Elements</code>选择要调试的元素</p></li><li><p>控制台直接用<code>$0</code>访问</p></li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtwJGicPickVvFdOOM7Hus6tzIOTfH2picywqZMfIotic4A9m1rfIMICNA9A/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_5-截取一张全屏的网页" tabindex="-1"><a class="header-anchor" href="#_5-截取一张全屏的网页" aria-hidden="true">#</a> 5#. 截取一张全屏的网页</h2><p>偶尔咱们也会有对网页截屏的需求，一屏还好，系统自带的截屏或者微信截图等都可以办到，但是要求<strong>将超出一屏的内容也截下来咋办呢</strong>？</p><ol><li><p>准备好需要截屏的内容</p></li><li><p><code>cmd + shift + p</code> 执行<code>Command</code>命令</p></li><li><p>输入<code>Capture full size screenshot</code> 按下回车</p></li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtsDDV8buou7Svmc9o0jmznjTVpuqaqg96FF3duHoZCraTV79TyzGpuQ/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>如果要截取选中的部分元素呢？</strong></p><p>答案也很简单，第三步输入<code>Capture node screenshot</code>即可</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjt7UFpMm3eYGicTCdh9bm8iaFTzGvaunorRfkaIJRf3SL2GUn8CKIk5YiaA/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_6-一键展开所有dom元素" tabindex="-1"><a class="header-anchor" href="#_6-一键展开所有dom元素" aria-hidden="true">#</a> 6#. 一键展开所有DOM元素</h2><p>调试元素时，在层级比较深的情况下，你是不是也经常一个个展开去调试？有一种更加快捷的方式</p><ol><li>按住<code>opt</code>键 + click（需要展开的最外层元素）</li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtfTILWdOb8hU0yXHJ6ib4qN3g0wp4OtRORq5Kw11vuZvRWbGZp8iaDibvA/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_7-控制台引用上一次执行的结果" tabindex="-1"><a class="header-anchor" href="#_7-控制台引用上一次执行的结果" aria-hidden="true">#</a> 7#. 控制台引用上一次执行的结果</h2><p>来看看这个场景，我猜你也一定遇到过, 对某个字符串进行了各种工序，然后我们想知道每一步执行的结果，该咋办？。</p><p><code>&#39;fatfish&#39;.split(&#39;&#39;).reverse().join(&#39;&#39;) // hsiftaf </code></p><p><strong>你可能会这样做</strong></p><p><code>// 第1步 &#39;fatfish&#39;.split(&#39;&#39;) // [&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;] // 第2步 [&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;].reverse() // [&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;] // 第3步 [&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;].join(&#39;&#39;) // hsiftaf </code></p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtmNQVs5hOdL1ZiaKaQTPdG0JbKorbHbOygAianGf4ibPXhrsSkwqdVdqWA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>更简单的方式</strong></p><p>使用<code>$_</code>引用上一次操作的结果，不用每次都复制一遍</p><p><code>// 第1步 &#39;fatfish&#39;.split(&#39;&#39;) // [&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;] // 第2步 $_.reverse() // [&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;] // 第3步 $_.join(&#39;&#39;) // hsiftaf </code></p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtDd2AWhh22XVVcJ1wK5dDwmugfYcicG6QcKKgX2b6jjRdgTmc6xjHNUQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_8-快速切换主题" tabindex="-1"><a class="header-anchor" href="#_8-快速切换主题" aria-hidden="true">#</a> 8.# 快速切换主题</h2><p>有的同学喜欢chrome的白色主题，有的喜欢黑色，我们可以使用快捷键迅速切换两个主题。</p><ol start="2"><li><p><code>cmd + shift + p</code> 执行<code>Command</code>命令</p></li><li><p>输入<code>Switch to dark theme</code>或者<code>Switch to light theme</code>进行主题切换</p></li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjthEeXtsPjG8kLRicTyFEGtfw9mH6p7XtTicFzASjDum5Xu2M1d3TZ3ytA/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_9-和-选择器" tabindex="-1"><a class="header-anchor" href="#_9-和-选择器" aria-hidden="true">#</a> 9.# &quot;<code>$</code>&quot;和&quot;<code>$$</code>&quot;选择器</h2><p>在控制台使用<code>document.querySelector</code>和<code>document.querySelectorAll</code>选择当前页面的元素是最常见的需求了，不过着实有点太长了，咱们可以使用<code>$</code>和<code>$$</code>替代。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjttLZmsLhOUhsS050tOicSlTBh4BayG3sRv4ub4Apep8tIGBm2kgJIqnA/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_10-i直接在控制台安装npm包" tabindex="-1"><a class="header-anchor" href="#_10-i直接在控制台安装npm包" aria-hidden="true">#</a> 10.# <code>$i</code>直接在控制台安装npm包</h2><p>你遇到过这个场景吗？有时候想使用比如<code>dayjs</code>或者<code>lodash</code>的某个<code>API</code>，但是又不想去官网查，如果可以在控制台直接试出来就好了。</p><p>Console Importer 就是这么一个插件，用来在控制台直接安装<code>npm</code>包。</p><ol><li><p>安装<code>Console Importer</code>插件</p></li><li><p>$i(&#39;name&#39;)安装npm包</p></li></ol><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtGC2Yu0HyRgBj8RfZXan7OmM1eBNXUGO3boXs8qsRfePkrsa64Nle5A/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_11-add-conditional-breakpoint条件断点的妙用" tabindex="-1"><a class="header-anchor" href="#_11-add-conditional-breakpoint条件断点的妙用" aria-hidden="true">#</a> 11.# Add conditional breakpoint条件断点的妙用</h2><p>假设有下面这段代码，咱们希望食物名字是<code>🍫</code>时才触发断点，可以怎么弄？</p><p><code>const foods = [   {     name: &#39;🍔&#39;,     price: 10   },   {     name: &#39;🍫&#39;,     price: 15   },   {     name: &#39;🍵&#39;,     price: 20   }, ] foods.forEach((v) =&gt; {   console.log(v.name, v.price) }) </code></p><p>这在大量数据下，只想对符合条件时打断点条件将会非常方便。试想如果没有条件断点咱们是不是要点n次debugger？</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_gif/d3KxlCFgM07CmiaAnbADu5iaHdBO1dyrjtZZicPWKZxamcSfmjVwXFnnrSC9qFDSq6oB1tgBiaWqKNKcMS8C5FkzVg/640?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>',61),t=[c];function p(m,r){return a(),e("div",null,t)}const l=i(d,[["render",p],["__file","浏览器调试技巧.html.vue"]]);export{l as default};
