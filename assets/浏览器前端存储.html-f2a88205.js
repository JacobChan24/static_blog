import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as n,c as r,a as o,b as e,d as c,f as a}from"./app-9e438faa.js";const l={},d=a("<p>在做项目的过程中，我们经常遇到需要把信息存储在本地的情况，比如权限验证的token、用户信息、埋点计数、客户配置的皮肤信息或语言种类等，我们可以暂存一下避免浏览器不必要的请求和客户多余操作，给客户使用带来方便。</p><p>那么浏览器存储有哪些方法呢，主要有<strong>cookie</strong>、<strong>localStorage</strong>、<strong>sessionStorage</strong></p><p><strong>cookie</strong>属于文档对象模型DOM树根节点document，而 <strong>sessionStorage</strong> 和 <strong>localStorage</strong> 属于浏览器对象模型BOM的对象window</p>",3),g=o("strong",null,"sessionStorage",-1),h=o("strong",null,"localStorage",-1),p={href:"https://link.segmentfault.com/?enc=BSs9HtC%2FgI0vT8KYNr9dDQ%3D%3D.hKP5nZRyRSqGTYtLNQcUfpzEJxMngIg4gFxbCUKYGmf3XAH83k4tVMCs%2BP7DahcZeep7IVSLWy7tDfnh3IbmOIgizGeBd4sqDToEZ9Z5RVDC96OCszUewFfwbTZIOnbV",target:"_blank",rel:"noopener noreferrer"},m=a(`<ul><li>**sessionStorage：**为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）</li><li>**localStorage：**同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li></ul><h2 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie" aria-hidden="true">#</a> 1. cookie</h2><p>h5之前，存储主要用cookies，缺点是在请求头上带着数据，导致流量增加。大小限制<code>4k</code></p><p>操作方式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>document.cookie = &quot;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/&quot;    // 设置cookie
document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;    // 删除cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置cookie的方法比较简单，其中有几个参数可以添加</p><h3 id="expires" tabindex="-1"><a class="header-anchor" href="#expires" aria-hidden="true">#</a> expires</h3><p><strong>过期时间</strong>，当过了到期日期时，浏览器会自动删除该cookie，如果想删除一个cookie，只需要把它过期时间设置成过去的时间即可<br> 比如希望设置过期时间一年：<code>new Date().getTime() + 365 * 24 * 60 * 60 * 1000</code></p><p>如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。</p><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h3><p><strong>路径</strong>，值可以是一个目录，或者是一个路径。</p><p>如果cc.com/test/index.html 建立了一个cookie，那么在cc.com/test/目录里的所有页面，以及该目录下面任何子目录里的页面都可以访问这个cookie。因此在cc.com/test/test2/test3 里的任何页面都可以访问cc.com/test/index.html建立的cookie。若cc.com/test/ 若想访问cc.com/test/index.html设置的cookes，需要把cookies的path属性设置成“/”。<br> 在指定路径的时候，凡是来自同一服务器，URL里有相同路径的所有WEB页面都可以共享cookies。</p><h3 id="domain" tabindex="-1"><a class="header-anchor" href="#domain" aria-hidden="true">#</a> domain</h3><p><strong>主机名</strong>，是指同一个域下的不同主机，例如：www.baidu.com和map.baidu.com就是两个不同的主机名。默认情况下，一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制：<code>document.cookie = &quot;name=value;domain=.baidu.com&quot;</code><br> 这样，所有*.baidu.com的主机都可以访问该cookie。</p><h2 id="_2-localstorage" tabindex="-1"><a class="header-anchor" href="#_2-localstorage" aria-hidden="true">#</a> 2. localStorage</h2><p>以键值对(Key-Value)的方式存储，永久存储，永不失效，除非手动删除。IE8+支持，每个域名限制<code>5M</code></p><p>打开同域的新页面也能访问得到</p><p>操作方式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>window.localStorage.username = &#39;hehe&#39;                   // 设置
window.localStorage.setItem(&#39;username&#39;, &#39;hehe&#39;)         // 设置
window.localStorage.getItem(&#39;username&#39;)                 // 读取
window.localStorage.removeItem(&#39;username&#39;)             // 删除
window.localStorage.key(1)                             // 读取索引为1的值
window.localStorage.clear()                            // 清除所有
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以存储数组、数字、对象等<strong>可以被序列化为字符串</strong>的内容</p><h2 id="_3-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_3-sessionstorage" aria-hidden="true">#</a> 3. sessionStorage</h2><p>sessionStorage操作的方法与localStroage是一样的，区别在于 sessionStorage 在关闭页面后即被清空，而 localStorage 则会一直保存。很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用sessionStorage就比较方便。</p><p>注意，刷新页面sessionStorage不会清除，但是打开同域新页面访问不到</p><h2 id="_4-cookie、localstorage、sessionstorage之间的区别" tabindex="-1"><a class="header-anchor" href="#_4-cookie、localstorage、sessionstorage之间的区别" aria-hidden="true">#</a> 4. cookie、localStorage、sessionStorage之间的区别</h2><p>他们都是保存在浏览器端的存储方式，他们之间的区别：</p><ol><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。</li><li><strong>存储大小限制</strong>不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li><li><strong>数据有效期</strong>不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。如果没有设置过期时间，那么关闭浏览器窗口时即过期</li><li><strong>作用域</strong>不同，sessionStorage不在不同的浏览器页面中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li><li>Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。</li><li>Web Storage 的 api 接口使用更方便，cookie的原生接口不友好，需要自己封装。</li></ol><h2 id="_5-安全性" tabindex="-1"><a class="header-anchor" href="#_5-安全性" aria-hidden="true">#</a> 5. 安全性</h2><p>需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的，因为它们保存在本地容易被篡改，使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。所以千万不要用它们存储你系统中的敏感数据。</p>`,28);function u(k,S){const t=i("ExternalLinkIcon");return n(),r("div",null,[d,o("p",null,[e("其中 "),g,e(" 和 "),h,e(" 是 "),o("a",p,[e("HTML5 Web Storage API"),c(t)]),e(" 提供的")]),m])}const x=s(l,[["render",u],["__file","浏览器前端存储.html.vue"]]);export{x as default};
