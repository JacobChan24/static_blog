import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c,f as d}from"./app-9e438faa.js";const s={},t=d("<p>v-show指令也是条件渲染的指令，跟v-if类似，但是其区别在于： v-show会在DOM元素当中保留该元素，always会渲染，只是改变该元素的display属性，此指令不支持在template元素上使用，也不能和v-else搭配使用</p><p><code>v-if</code> 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。<code>v-if</code>会监听对应的属性，为真时渲染，为假时销毁，不只是页面加载时才判断一次</p><p><code>v-if</code> 也是<strong>惰性</strong>的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p><p>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS <code>display</code> 属性会被切换。</p><p>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适。</p>",5),p=[t];function a(i,r){return o(),c("div",null,p)}const _=e(s,[["render",a],["__file","v-show.html.vue"]]);export{_ as default};
