import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c,f as a}from"./app-9e438faa.js";const i={},t=a("<p>在 JavaScript 中，<code>await</code> 关键字只能在异步函数（被 <code>async</code> 关键字标记的函数）中使用。当遇到 <code>await</code> 关键字时，它会暂停当前异步函数的执行，并等待一个 Promise 对象的解析结果。</p><p>具体来说，当遇到 <code>await</code> 关键字时，以下情况可能发生：</p><ol><li>如果 <code>await</code> 后面的表达式是一个 Promise 对象，并且该 Promise 对象处于未解析（pending）状态，<code>await</code> 会阻塞当前的异步函数执行，并暂时将控制权返回给调用者。这意味着其他任务可以在此期间继续执行。</li><li>如果 <code>await</code> 后面的表达式是一个已解析（resolved）的 Promise 对象，即 Promise 的状态变为成功，<code>await</code> 将立即返回 Promise 对象的解析值，并继续执行异步函数后面的代码。</li><li>如果 <code>await</code> 后面的表达式是一个拒绝（rejected）的 Promise 对象，即 Promise 的状态变为失败，<code>await</code> 将抛出一个异常，并进入到异步函数的异常处理逻辑（可以使用 <code>try/catch</code> 捕获异常）。</li></ol><p>在等待 Promise 解析的过程中，JavaScript 引擎会暂时离开当前的异步函数，并让出线程，以允许其他任务执行，包括处理事件、执行其他代码等。当 Promise 对象解析完成后，异步函数将从暂停的地方继续执行，并返回解析的值（或抛出异常）。</p><p>通过使用 <code>await</code> 关键字，我们可以以更加同步的方式编写异步代码，而不需要使用回调函数或 Promise 的 <code>then</code> 方法来处理异步操作的结果。它使得异步代码更易于编写和阅读，并且可以更直观地表达代码的逻辑流程。</p>",5),d=[t];function r(s,m){return o(),c("div",null,d)}const l=e(i,[["render",r],["__file","async-await语法糖.html.vue"]]);export{l as default};
