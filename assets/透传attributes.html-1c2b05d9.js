import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as a,c as i,a as t,b as e,d as n,f as l}from"./app-9e438faa.js";const c={},d={href:"https://cn.vuejs.org/guide/components/props.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://cn.vuejs.org/guide/components/events.html#defining-custom-events",target:"_blank",rel:"noopener noreferrer"},h=t("code",null,"v-on",-1),_=t("code",null,"class",-1),p=t("code",null,"style",-1),b=t("code",null,"id",-1),m=t("strong",null,"子组件的根元素",-1),v=l(`<ul><li>Q：父组件在引用子组件的时候如何进行透传？ <code>&lt;child-component class = &quot;style1&quot;&gt;&lt;/child-component&gt;</code></li></ul><h4 id="_1-深层组件继承" tabindex="-1"><a class="header-anchor" href="#_1-深层组件继承" aria-hidden="true">#</a> 1.深层组件继承</h4><p>有时候父组件有一些属性透传给子组件A的根元素，但是该根元素是另外一个引用的子组件B，这些属性也会继续透传到子组件B，以此类推，除非在Prop选项里进行声明，声明后的属性则不会透传，在这一层就被“消耗”掉了</p><h4 id="_2-禁用属性继承" tabindex="-1"><a class="header-anchor" href="#_2-禁用属性继承" aria-hidden="true">#</a> 2.禁用属性继承</h4><p>如前所述，父组件上的属性会透传到子组件的根元素上面，而有时候我们不希望这样的自动继承发生，想将透传的属性用到组件内其他非根节点上，我们有两个设置可以灵活地满足这个需求：</p><ol><li>在组件选项中设置<code>inheritAttrs:false</code> 就不会有自动继承发生</li><li>模板表达式中使用<code>$attrs</code>对象访问到所有未被声明(prop和emit)的组件属性 我们如果需要访问透传的属性，可以使用常规的访问对象属性的方法：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$attrs[&#39;prop1&#39;]
$attrs.onclick //访问透传的监听属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;button v-bind=&quot;$attrs&quot;&gt;&lt;/button&gt;</code> # 将透传的属性都绑定在某个非根元素上</p><p>附：</p><ul><li>不带参数的v-bind的使用方法 v-bind=&quot;obj&quot;这样的写法会将对象里面所有的属性名与其对应的值作为元素的属性应用到目标元素上面</li><li>在JS中访问透传属性的方式：<code>this.$attrs</code>（跟在模板表达式中访问不同）</li></ul><h4 id="_3-多根节点的attributes继承" tabindex="-1"><a class="header-anchor" href="#_3-多根节点的attributes继承" aria-hidden="true">#</a> 3.多根节点的Attributes继承</h4><p>多根节点的子组件没有自动透传的行为，如果<code>$attrs</code>没有用v-bind显示绑定，VUE就不知道要将属性透传到哪里，所以就会抛出一个警告</p>`,12);function f(g,x){const o=r("ExternalLinkIcon");return a(),i("div",null,[t("p",null,[e("“透传 attribute”指的是传递给一个组件（的根元素），却没有被该组件声明为 "),t("a",d,[e("props"),n(o)]),e(" 或 "),t("a",u,[e("emits"),n(o)]),e(" 的 attribute 或者 "),h,e(" 事件监听器的属性。最常见的例子就是 "),_,e("、"),p,e(" 和 "),b,e("。 但一个组件以单个元素为根来渲染时，这些透传的id calss style属性或者监听器都会添加到"),m,e("上，若是子组件的根元素已经有自己的相应的属性了，他们就会叠加")]),v])}const $=s(c,[["render",f],["__file","透传attributes.html.vue"]]);export{$ as default};
