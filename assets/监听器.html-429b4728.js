const e=JSON.parse(`{"key":"v-6944c4d5","path":"/Tech/Backend/nodeJS/%E5%9F%BA%E7%A1%80/%E7%9B%91%E5%90%AC%E5%99%A8.html","title":"","lang":"en-US","frontmatter":{"description":"node js提供了很多监听器，可以用于不同的监听场景 server对象监听器 'request'：当有HTTP请求到达服务器时触发该事件。可以使用server.on('request', callback)方法来监听该事件。该事件触发时，回调函数会被传入两个参数：一个request对象和一个response对象。 'connection'：当有新的TCP连接建立时触发该事件。可以使用server.on('connection', callback)方法来监听该事件。该事件触发时，回调函数会被传入一个socket对象，它表示一个TCP连接。 'close'：当服务器关闭时触发该事件。可以使用server.on('close', callback)方法来监听该事件。该事件触发时，回调函数不需要传入任何参数。 'listening'：当服务器开始监听端口时触发该事件。可以使用server.on('listening', callback)方法来监听该事件。该事件触发时，回调函数不需要传入任何参数。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Tech/Backend/nodeJS/%E5%9F%BA%E7%A1%80/%E7%9B%91%E5%90%AC%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:description","content":"node js提供了很多监听器，可以用于不同的监听场景 server对象监听器 'request'：当有HTTP请求到达服务器时触发该事件。可以使用server.on('request', callback)方法来监听该事件。该事件触发时，回调函数会被传入两个参数：一个request对象和一个response对象。 'connection'：当有新的TCP连接建立时触发该事件。可以使用server.on('connection', callback)方法来监听该事件。该事件触发时，回调函数会被传入一个socket对象，它表示一个TCP连接。 'close'：当服务器关闭时触发该事件。可以使用server.on('close', callback)方法来监听该事件。该事件触发时，回调函数不需要传入任何参数。 'listening'：当服务器开始监听端口时触发该事件。可以使用server.on('listening', callback)方法来监听该事件。该事件触发时，回调函数不需要传入任何参数。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Mr.Jacob"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Jacob\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"server对象监听器","slug":"server对象监听器","link":"#server对象监听器","children":[]},{"level":3,"title":"request对象监听器","slug":"request对象监听器","link":"#request对象监听器","children":[]},{"level":3,"title":"response对象监听器","slug":"response对象监听器","link":"#response对象监听器","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.89,"words":1466},"filePathRelative":"Tech/Backend/nodeJS/基础/监听器.md","excerpt":"<p>node js提供了很多监听器，可以用于不同的监听场景</p>\\n<h3> server对象监听器</h3>\\n<ol>\\n<li>\\n<p>'request'：当有HTTP请求到达服务器时触发该事件。可以使用<code>server.on('request', callback)</code>方法来监听该事件。该事件触发时，回调函数会被传入两个参数：一个request对象和一个response对象。</p>\\n</li>\\n<li>\\n<p>'connection'：当有新的TCP连接建立时触发该事件。可以使用<code>server.on('connection', callback)</code>方法来监听该事件。该事件触发时，回调函数会被传入一个socket对象，它表示一个TCP连接。</p>\\n</li>\\n<li>\\n<p>'close'：当服务器关闭时触发该事件。可以使用<code>server.on('close', callback)</code>方法来监听该事件。该事件触发时，回调函数不需要传入任何参数。</p>\\n</li>\\n<li>\\n<p>'listening'：当服务器开始监听端口时触发该事件。可以使用<code>server.on('listening', callback)</code>方法来监听该事件。该事件触发时，回调函数不需要传入任何参数。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
